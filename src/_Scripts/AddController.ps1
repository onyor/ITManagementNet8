function Add-APIController () {
    $EntityName = $requiredInfo.EntityName
    $Namespace = $requiredInfo.Namespace
    $EntityNameLower = $requiredInfo.EntityNameLower
    
    $ControllerPath = "././WebAPI/Controllers/$($Namespace)Controller.cs"
    
    if (Test-Path $ControllerPath) {
        $file = Get-Content $ControllerPath
        if (!([string]$file).Contains("_$($Namespace)Service = $($Namespace)Service;") -and !([string]$file).Contains("private readonly I$($EntityName)Service _$($EntityNameLower)Service;") ) {
            $_newString = "";
            foreach ($line in Get-Content $ControllerPath) {
                if ($line.Contains("using System;")) {
                    if (!([string]$file).Contains("using ITX.Application.Dtos.$($Namespace);")) {
                        $line += "`n" + "using ITX.Application.Dtos.$($Namespace);"
                    }
                    elseif (!([string]$file).Contains("using ITX.Application.Interfaces.$($Namespace);")) {
                        $line += "`n" + "using ITX.Application.Interfaces.$($Namespace);"
                    }
                }
                elseif ($line.Contains("IMapper _mapper;")) {
                    if (!([string]$file).Contains("I$($EntityName)Service _$($EntityNameLower)Service;")) {
                        $line += "`n`t`t`private readonly I$($EntityName)Service _$($EntityNameLower)Service;"
                    }
                }
                elseif ($line.Contains("IMapper mapper")) {
                    if ($line.Contains(")")) {
                        $line = $line.Replace(")", ",")
                        if (!([string]$file).Contains("I$($EntityName)Service $($EntityNameLower)Service,")) {
                            $line += " I$($EntityName)Service $($EntityNameLower)Service)"
                        }
                    }
                    else {
                        if (!([string]$file).Contains("I$($EntityName)Service $($EntityNameLower)Service,")) {
                            $line += " I$($EntityName)Service $($EntityNameLower)Service,"
                        }
                    }
                }
                elseif ($line.Contains("_mapper = mapper;")) {
                    if (!([string]$file).Contains("_$($EntityNameLower)Service = $($EntityNameLower)Service;")) {
                        $line += "`n`t`t`t`_$($EntityNameLower)Service = $($EntityNameLower)Service;"
                    }
                }
                elseif ($line.Contains("/* <auto-generated (for-script-LoadDataTable)/> */")) {
                    if (!([string]$file).Contains("_$($EntityNameLower)Service.LoadDataTableAsync")) {
                        $sentence = "`n`t`t`t`t'$($EntityName)' => await _$($EntityNameLower)Service.LoadDataTableAsync(vm),";
                        $line += $sentence.Replace("'", '"');
                    }
                }
                elseif ($line.Contains("/* <auto-generated (for-script-Get)/> */")) {
                    if (!([string]$file).Contains("_$($EntityNameLower)Service.GetAsync")) {
                        $sentence = "`n`t`t`t`t'$($EntityName)' => (await _$($EntityNameLower)Service.GetAsync(x => x.Id == id)).Value,";
                        $line += $sentence.Replace("'", '"');
                    }
                }
                elseif ($line.Contains("/* <auto-generated (for-script-GetAll)/> */")) {
                    if (!([string]$file).Contains("_$($EntityNameLower)Service.GetAllAsync")) {
                        $sentence = "`n`t`t`t`t'$($EntityName)' => (await _$($EntityNameLower)Service.GetAllAsync()).Value,";
                        $line += $sentence.Replace("'", '"');
                    }
                }
                elseif ($line.Contains("/* <auto-generated (for-script-Save)/> */")) {
                    if (!([string]$file).Contains("_$($EntityNameLower)Service.AddAsync")) {
                        $line += "`n`n";
                        $line += @"
                        
        [HttpPost("Save$($EntityName)")]
        public async Task<Result<$($EntityName)Dto>> Save$($EntityName)([FromForm] $($EntityName)Dto dto)
        {
            try
            {
                Result<$($EntityName)Dto> result;
                if (dto.Id == 0)
                {
                    result = await _$($EntityNameLower)Service.AddAsync(dto);
                }
                
                else
                {
                    result = await _$($EntityNameLower)Service.UpdateAsync(dto);

                }

                return result.Status switch 
                {
                    ResultStatus.Ok => Result<$($EntityName)Dto>.Success(result.Value),
                    ResultStatus.Error => Result<$($EntityName)Dto>.Error(),
                    ResultStatus.Forbidden => Result<$($EntityName)Dto>.Forbidden(),
                    ResultStatus.Invalid => Result<$($EntityName)Dto>.Invalid(result.ValidationErrors),
                    ResultStatus.NotFound => Result<$($EntityName)Dto>.NotFound(),
                    _ => null
                };
            }
            catch (Exception ex)
            {
                return Result<$($EntityName)Dto>.Error(ex.Message);
            }
        }
"@
                    }
                }
                elseif ($line.Contains("/* <auto-generated (for-script-Delete)/> */")) {
                    if (!([string]$file).Contains("_$($EntityNameLower)Service.DeleteAsync")) {
                        $line += "`n";
                        $line += @"
                case "$($EntityName)":
                    {
                        await _$($EntityNameLower)Service.DeleteAsync(x => x.Id == id);
                        return Result<Object>.Success(new { deleted = true });
                    }
"@
                    }
                }
                $_newString += $line + "`n";
            }
            
            $_newString | Out-File $ControllerPath -Encoding UTF8
            
        }
        else {
            Write-Host "`tÂ¬ API Controller zaten mevcut." -ForegroundColor  DarkBlue
        }
    }

    else {
        $ControllerFileText = @"
using System;
using ITX.Application.Dtos.$($Namespace);
using ITX.Application.Interfaces.$($Namespace);
using ITX.Application.ViewModels;
using Ardalis.Result;
using Ardalis.Result.AspNetCore;
using AutoMapper;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace ITX.WebAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class $($Namespace)Controller : BaseController
    {
        private readonly IMapper _mapper;
        private readonly I$($EntityName)Service _$($EntityNameLower)Service;

        public $($Namespace)Controller(IMapper mapper, I$($EntityName)Service $($EntityNameLower)Service)
        {
            _mapper = mapper;
            _$($EntityNameLower)Service = $($EntityNameLower)Service;
        }

        [HttpPost("LoadDataTable/{FType}/{UstId?}")]
        public async Task<Result<JsonResult>> LoadDataTable(string FType, long? UstId)
        {
            var vm = new DataTableViewModel(Request);
            vm.UstId = UstId;

            return FType switch
            {
                /* <auto-generated (for-script-LoadDataTable)/> */
                "$($EntityName)" => await _$($EntityNameLower)Service.LoadDataTableAsync(vm),
                _ => null
            };
        }

        [HttpGet("Get/{FType}/{id}")]
        public async Task<Result<Object>> Get(string FType, long id)
        {
            return FType switch
            {
                /* <auto-generated (for-script-Get)/> */
                "$($EntityName)" => (await _$($EntityNameLower)Service.GetAsync(x => x.Id == id)).Value,
                _ => null
            };
        }

        [HttpGet("GetAll/{FType}/{UstId?}")]
        public async Task<Result<Object>> GetAll(string FType, long? UstId)
        {
            return FType switch
            {
                /* <auto-generated (for-script-GetAll)/> */
                "$($EntityName)" => (await _$($EntityNameLower)Service.GetAllAsync()).Value,
                _ => null
            };
        }

        [HttpDelete("Delete/{FType}/{id}")]
        public async Task<Result<Object>> Delete(string FType, long id)
        {
            switch (FType)
            {
                /* <auto-generated (for-script-Delete)/> */
                case "$($EntityName)":
                    {
                        await _$($EntityNameLower)Service.DeleteAsync(x => x.Id == id);
                        return Result<Object>.Success(new { deleted = true });
                    }
                default:
                    return null;
            }
        }

        /* <auto-generated (for-script-Save)/> */

        [HttpPost("Save$($EntityName)")]
        public async Task<Result<$($EntityName)Dto>> Save$($EntityName)([FromForm] $($EntityName)Dto dto)
        {
            try
            {
                Result<$($EntityName)Dto> result;
                if (dto.Id == 0)
                {
                    result = await _$($EntityNameLower)Service.AddAsync(dto);
                }
                
                else
                {
                    result = await _$($EntityNameLower)Service.UpdateAsync(dto);

                }

                return result.Status switch 
                {
                    ResultStatus.Ok => Result<$($EntityName)Dto>.Success(result.Value),
                    ResultStatus.Error => Result<$($EntityName)Dto>.Error(),
                    ResultStatus.Forbidden => Result<$($EntityName)Dto>.Forbidden(),
                    ResultStatus.Invalid => Result<$($EntityName)Dto>.Invalid(result.ValidationErrors),
                    ResultStatus.NotFound => Result<$($EntityName)Dto>.NotFound(),
                    _ => null
                };
            }
            catch (Exception ex)
            {
                return Result<$($EntityName)Dto>.Error(ex.Message);
            }
        }
    }
}
"@
        $ControllerFileText > $ControllerPath 
    }
}
