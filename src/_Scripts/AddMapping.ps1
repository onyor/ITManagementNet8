function Add-CreateForMemberEnum([string]$prop, [string]$type) {
    $row = "`n`t`t`t`t.ForMember(d => d.$($prop)Name, o => o.MapFrom(s => s.$prop != null ? SeedData.enumDegerBilgi('$($type)', (long)s.$prop) : ''))"
    return $row
}

function Add-CreateForMemberDomain([string]$prop) {
    $_prop = $prop.Replace("Id", "")
    $row = "`n`t`t`t`t.ForMember(d => d.$($_prop)IdName, o => o.MapFrom(s => s.$($_prop).Name != null ? s.$($_prop).Name : ''))"
    return $row
}

function Add-CreateForMemberForm([string]$prop) {
    $row = "`n`t`t`t`t.ForMember(d => d.$($prop)Name, o => o.MapFrom(s => SeedData.GetFormData(s.$($prop))))"
    return $row
}

function Add-CreateForMemberReverseDomain([string]$prop) {
    $_prop = $prop.Replace("Id", "")
    $row = "`n`t`t`t`t.ForMember(x => x.$($_prop), opt => opt.Ignore())"
    return $row
}

function Add-CreateMap() {
    $row = "";
    if (!$mappingarrayList) {
        $row = "`n`t`t`tCreateMap<$($EntityName), $($EntityName)Dto>().ReverseMap();`n"
    }
    else {
        $row = @" 
        `n`t`t`tCreateMap<$($EntityName), $($EntityName)Dto>()
"@
        foreach ($item in $mappingarrayList) {
            if ($item.DefineType -eq "Enum") {
                $row += Add-CreateForMemberEnum $item.Prop $item.Type
            }
            elseif ($item.DefineType -eq "Form") {
                $row += Add-CreateForMemberForm $item.Prop
            }
            elseif ($item.DefineType -eq "Domain") {
                $row += Add-CreateForMemberDomain $item.Prop
            }
        }
        $row += @"       
;       `n`t`t`tCreateMap<$($EntityName)Dto, $($EntityName)>()
"@
        foreach ($item in $mappingArrayList) {
            if ($item.DefineType -eq "Domain") {
                $row += Add-CreateForMemberReverseDomain $item.Prop
            }
        }
        $row += ";";
    }
    return $row.Replace("'",'"')
}

function Add-Mapping () {
    $EntityName = $requiredInfo.EntityName
    $Namespace = $requiredInfo.Namespace

    $pathName = "././WebAPI/Helpers/MappingProfiles.cs"
    $file = Get-Content $pathName

    if (!([string]$file).Contains("CreateMap<$($EntityName), $($EntityName)Dto>")) {
        foreach ($line in Get-Content $pathName) {
            if ($line.Contains("/* <auto-generated (for-script)/> */")) {
                $line += Add-CreateMap
                $line += "`n"
            }
            elseif ($line.Contains("//using ITX.Application")) {
                if (!([string]$file).Contains("Dtos.$($Namespace); ")) {
                    $line += "`n" + "using ITX.Application.Dtos.$($Namespace); "
                }
            }
            elseif ($line.Contains("//using ITX.Domain")) {
                if (!([string]$file).Contains("Entities.$($Namespace); ")) {
                    $line += "`n" + "using ITX.Domain.Entities.$($Namespace); "
                }
            }
            $newString += $line + "`n";
        }
        New-Item -Path $pathName -Value $newString -Force
    }
    else {
        Write-Host "`tÂ¬ Mapping zaten mevcut." -ForegroundColor  DarkBlue
    }
}