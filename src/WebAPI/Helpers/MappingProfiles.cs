using AutoMapper;
using FluentValidation;
using ITX.Application;
using ITX.Application.Dtos.LogManagement;
using ITX.Application.Dtos.FormManagement;
using ITX.Application.Dtos.Identity;
using ITX.Application.Dtos.Predefined;
//using ITX.Application
using ITX.Application.Dtos.Test;
using ITX.Application.Extensions;
using ITX.Domain.Entities.LogManagement;
using ITX.Domain.Entities.FormManagement;
//using ITX.Domain.Entities.GuidanceManagement;
using ITX.Domain.Entities.Identity;
using ITX.Domain.Entities.Predefined;
//using ITX.Domain
using ITX.Domain.Entities.Test;
using ITX.Persistance.Cache;
using ITX.Persistance.Database;
using ITX.Persistance.Database.Context;
using System.Linq;
using System;

namespace ITX.WebAPI.Helpers
{
    public class MappingProfiles : Profile
    {
        protected ICache _cache = new MemoryCache();
        private readonly ITManagementDbContext _context;

        public MappingProfiles(ITManagementDbContext context)
        {
            _context = context;
            /* <auto-generated (for-script)/> */  //Bu satir onemlidir script icin lazim VERY IMPORTANT !! !!        
            CreateMap<Lesson, LessonDto>().ReverseMap();

            CreateMap<StudentLesson, StudentLessonDto>().ReverseMap();

            CreateMap<Student, StudentDto>()
                .ForMember(d => d.CityIdName, o => o.MapFrom(s => s.City.Name))
                .ForMember(d => d.LessonIds, o => o.MapFrom(s => s.StudentLessons.Where(sl=>sl.IsActive && !sl.IsDeleted).Select(x => x.LessonId)))
                .ForMember(d => d.ScenarioIdName, o => o.MapFrom(s => s.Scenario.Name))
                .ForMember(d => d.Lessons, o => o.MapFrom(s => s.StudentLessons.Count > 0 && (s.StudentLessons.Any(sl => sl.Student.IsActive && !sl.Student.IsDeleted)) ? String.Join(", ", s.StudentLessons.Where(x => !x.IsDeleted && x.IsActive).Select(x => x.Lesson.Name).ToList()) : ""));
            CreateMap<StudentDto, Student>()
                .ForMember(d => d.City, opt => opt.Ignore());

            CreateMap<Scenario, ScenarioDto>()
                .ForMember(d => d.UlasimAracIdName, o => o.MapFrom(s => s.UlasimAracId != null ? SeedData.GetFormData((long)s.UlasimAracId) : ""))
                .ForMember(d => d.CurrencyDefinitionIdName, o => o.MapFrom(s => s.CurrencyDefinition.Name))
                .ForMember(d => d.CountryIdName, o => o.MapFrom(s => s.Country.Name))
                .ForMember(d => d.CityIdName, o => o.MapFrom(s => s.City.Name))
                .ForMember(d => d.RequestLogTypeCodeIdName, o => o.MapFrom(s => SeedData.enumDegerBilgi("EnmRequestLogTypeCode", (long)s.RequestLogTypeCodeId)))
                .ForMember(d => d.GenderIdName, o => o.MapFrom(s => SeedData.enumDegerBilgi("EnmGender", (long)s.GenderId)));
            CreateMap<ScenarioDto, Scenario>()
                .ForMember(d => d.Country, opt => opt.Ignore())
                .ForMember(d => d.City, opt => opt.Ignore())
                .ForMember(d => d.CurrencyDefinition, opt => opt.Ignore());

            CreateMap<ClaimType, ClaimTypeDto>().ReverseMap();

            CreateMap<UserDto, LoginResponseModel>();
            CreateMap<UserDto, StorageModel>();

            // API => Domain
            CreateMap<MenuDto, Menu>().ReverseMap();

            CreateMap<MenuRole, MenuRoleDto>()
                .ForMember(d => d.RoleName, o => o.MapFrom(s => s.Role.Name));
            CreateMap<MenuRoleDto, MenuRole>();

            CreateMap<RoleDto, Role>().ReverseMap();
            CreateMap<UserDto, User>().ReverseMap();
            CreateMap<UserRoleDto, UserRole>().ReverseMap();
            CreateMap<RegisterDto, User>().ReverseMap();
            CreateMap<FormTanimDto, FormTanim>().ReverseMap();
            CreateMap<FormAlanDto, FormAlan>();
            CreateMap<FormAlan, FormAlanDto>();
            CreateMap<ValueTextDto, ValueText>().ReverseMap();
            CreateMap<ValueNumberDto, ValueNumber>().ReverseMap();
            CreateMap<DegerTarihDto, DegerTarih>().ReverseMap();
            CreateMap<FormDegerDto, FormDeger>().ReverseMap();

            CreateMap<Country, CountryDto>()
                .ForMember(d => d.CurrencyDefinitionIdSymbol, o => o.MapFrom(s => s.CurrencyDefinition.Symbol));
            CreateMap<CountryDto, Country>();

            CreateMap<City, CityDto>()
                .ForMember(d => d.CountryIdAd, o => o.MapFrom(s => s.Country != null ? s.Country.Name : ""));
            CreateMap<CityDto, City>();

            CreateMap<UserClaim, UserClaimDto>()
             .ForMember(d => d.UserIdName, o => o.MapFrom(s => s.User != null ? s.User.Name : ""));
            CreateMap<UserClaimDto, UserClaim>();

            CreateMap<RoleClaim, RoleClaimDto>()
                .ForMember(d => d.RoleIdName, o => o.MapFrom(s => s.Role.Name));
            CreateMap<RoleClaimDto, RoleClaim>();

            CreateMap<CurrencyDefinition, CurrencyDefinitionDto>().ReverseMap();
            CreateMap<AppSetting, AppSettingDto>().ReverseMap();
            CreateMap<AnnounceDto, Announce>().ReverseMap();

            CreateMap<AuditLog, AuditLogDto>()
                .ForMember(d => d.UserName, o => o.MapFrom(s => s.User.Name))
                .ForMember(d => d.UserSurname, o => o.MapFrom(s => s.User.Surname))
                .ForMember(d => d.UserEmail, o => o.MapFrom(s => s.User.Email));
            CreateMap<AuditLogDto, AuditLog>();

            CreateMap<RequestLog, RequestLogDto>()
                .ForMember(d => d.LogTypeAd, o => o.MapFrom(s => SeedData.enumDegerBilgi("EnmRequestLogTypeCode", s.RequestLogTypeCodeId)))
                .ForMember(d => d.Islem, o => o.MapFrom(s => s.Islem.Replace("<", "(").Replace(">", ")")))
                .ForMember(d => d.UserIdAdSoyad, o => o.MapFrom(s => ApplicationData.KullaniciListe.Where(x => x.Key == s.UserId).FirstOrDefault().Value.Name + " " + ApplicationData.KullaniciListe.Where(x => x.Key == s.UserId).FirstOrDefault().Value.Surname));
            CreateMap<RequestLogDto, RequestLog>();

            CreateMap<EnumVeri, EnumVeriDto>()
                .ForMember(d => d.EnumTanimAd, o => o.MapFrom(s => SeedData.GetEnumTanimAd(s.EnumTanimId)));
            CreateMap<EnumVeriDto, EnumVeri>();

            CreateMap<District, DistrictDto>()
                .ForMember(d => d.CityIdName, o => o.MapFrom(s => s.City.Name));
            CreateMap<DistrictDto, District>();
        }
    }
}
