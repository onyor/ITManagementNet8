using Ardalis.Result;
using ITX.Application.Dtos.LogManagement;
using ITX.Application.Dtos.ReportManagement;
using ITX.Application.Interfaces;
using ITX.Application.ViewModels;
using ITX.Infrastructure.Services;
using Microsoft.AspNetCore.Mvc;
using Nest;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace ITX.WebAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class LogController : BaseController
    {
        private readonly IAuditLogService _auditLogService;
        private readonly IRequestLogService _requestLogService;
        public LogController(IAuditLogService auditLogService, IRequestLogService requestLogService)
        {
            _auditLogService = auditLogService;
            _requestLogService = requestLogService;
        }

        [HttpPost("LoadDataTable")]
        public async Task<Result<JsonResult>> LoadDataTable([FromForm] List<SearchParameterDto> aramaKriter)
        {
            var vm = new DataTableViewModel(Request);
            return await _auditLogService.LoadDataTableAsync(vm, aramaKriter);
        }

        [HttpGet("GetAll/{FType}/{UstId?}")]
        public async Task<Result<Object>> GetAll(string FType, long? UstId)
        {
            return FType switch
            {
                /* <auto-generated (for-script-GetAll)/> */
                "Type" => (await _auditLogService.GetAllByIslemType()).Value,
                "Request" => (await _requestLogService.GetAllByIslemType()).Value,
                _ => null
            };
        }

        [HttpGet("Get/{FType}/{id}")]
        public async Task<Result<Object>> Get(string FType, long id)
        {
            return FType switch
            {
                /* <auto-generated (for-script-Get)/> */
                "Audit" => (await _auditLogService.GetAsync(id)).Value,
                "Request" => (await _requestLogService.GetAsync(id)).Value,
                _ => null
            };
        }

        [HttpPost("RequestLoad")]
        public async Task<Result<JsonResult>> RequestLoadDataTable([FromForm] List<SearchParameterDto> aramaKriter)
        {
            var vm = new DataTableViewModel(Request);
            return await _requestLogService.LoadDataTableAsync(vm, aramaKriter);
        }


        [HttpPost("AuditLoad")]
        public async Task<Result<JsonResult>> AuditLoadDataTable([FromForm] string PrimaryKey, [FromForm] string tableName)
        {
            var vm = new DataTableViewModel(Request);

            AuditLogSearchDto searchDto = new()
            {
                PrimaryKey = PrimaryKey,
                TableName = tableName,
            };

            return await _auditLogService.GetLogDetailsAsync(vm, searchDto);
        }
    }
}
