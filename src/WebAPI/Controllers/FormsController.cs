using Ardalis.Result;
using AutoMapper;
using ITX.Application;
using ITX.Application.Dtos.FormManagement;
using ITX.Application.Interfaces.FormYonetim;
using ITX.Application.Interfaces.Identity;
using ITX.Application.ViewModels;
using ITX.Domain.Shared.Enums;
using ITX.Persistance.Database;
using ITX.Persistance.Database.Context;
using ITX.Persistance.Extensions;
using ITX.WebAPI.ViewModels;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic.Core;
using System.Threading.Tasks;

namespace ITX.WebAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    [AllowAnonymous]
    public class FormsController : BaseController
    {
        private readonly IMapper _mapper;
        private readonly IEnumVeriService _enumVeriService;
        private readonly IFormTanimService _formTanimService;
        private readonly IFormAlanService _formAlanService;
        private readonly IFormDegerService _formDegerService;
        private readonly IValueTextService _valueTextService;
        private readonly IValueNumberService _valueNumberService;
        private readonly IDegerTarihService _degerTarihService;
        private readonly ITManagementDbContext _context;

        public FormsController(
            IMapper mapper,
            IFormTanimService formTanimService,
            ITManagementDbContext context,
            IEnumVeriService enumVeriService,
            IFormAlanService formAlanService,
            IFormDegerService formDegerService,
            IValueTextService valueTextService,
            IValueNumberService valueNumberService,
            IDegerTarihService degerTarihService)
        {
            _mapper = mapper;
            _context = context;
            _formTanimService = formTanimService;
            _formAlanService = formAlanService;
            _formDegerService = formDegerService;
            _valueTextService = valueTextService;
            _valueNumberService = valueNumberService;
            _degerTarihService = degerTarihService;
            _enumVeriService = enumVeriService;
        }

        [HttpPost("LoadDataTable/{FType}/{UstId?}")]
        public async Task<Result<JsonResult>> LoadDataTable(string FType, long? UstId)
        {
            var vm = new DataTableViewModel(Request);
            vm.UstId = UstId;

            return FType switch
            {
                /* <auto-generated (for-script-LoadDataTable)/> */
                "FormTanim" => await _formTanimService.LoadDataTableAsync(vm),
                "FormAlan" => await _formAlanService.LoadDataTableAsync(vm),
                "VeriList" => await _formDegerService.LoadDataTableAsync(vm),
                "VeriListSimple" => await _formDegerService.SimpleLoadDataTableAsync(vm),
                "EnumVeri" => await _enumVeriService.LoadDataTable(vm),
                _ => null
            };
        }

        [HttpGet("Get/{FType}/{id}")]
        public async Task<Result<Object>> Get(string FType, long id)
        {
            return FType switch
            {
                /* <auto-generated (for-script-Get)/> */
                "FormTanim" => (await _formTanimService.GetAsync(id)).Value,
                "EnumVeri" => (await _enumVeriService.GetAsync(x => x.Id == id)).Value,
                "FormAlan" => (await _formAlanService.GetAsync(id)).Value,
                "FormDeger" => (await _formDegerService.GetAsync(id)).Value,
                _ => null
            };
        }

        [HttpGet("GetAll/{FType}/{UstId?}")]
        public async Task<Result<Object>> GetAll(string FType, long? UstId)
        {
            return FType switch
            {
                /* <auto-generated (for-script-GetAll)/> */
                "EnumVeri" => (await _enumVeriService.GetAllAsync()).Value,
                "FormTanim" => (await _formTanimService.GetAllAsync()).Value,
                "FormAlan" => (await _formAlanService.GetAllAsync((long)UstId)).Value,
                _ => null
            };
        }

        [HttpDelete("Delete/{FType}/{id}")]
        public async Task<Result<Object>> Delete(string FType, long id)
        {
            switch (FType)
            {
                /* <auto-generated (for-script-Delete)/> */
                case "FormTanim":
                    {
                        var formTanim = await _formTanimService.GetAsync(id);
                        if (formTanim.Value == null)
                        {
                            return Result<Object>.NotFound();
                        }

                        await _formTanimService.DeleteAsync(formTanim);

                        return Result<Object>.Success(new { deleted = true });
                    }
                case "FormAlan":
                    {
                        var formAlan = await _formAlanService.GetAsync(id);
                        if (formAlan.Value == null)
                        {
                            return Result<Object>.NotFound();
                        }

                        await _formAlanService.DeleteAsync(formAlan);

                        return Result<Object>.Success(new { deleted = true });

                    }
                case "FormDeger":
                    {
                        var formDeger = await _formDegerService.GetAsync(id);
                        var result = false;
                        if (formDeger.Value == null)
                        {
                            return Result<Object>.NotFound();
                        }

                        var enumVeriList = await _context.EnumVeris.Where(x => x.EnumTanimId == id).ToListAsync();
                        var valueText = await _context.ValueTexts.Where(x => x.FormDegerId == id).ToListAsync();
                        var valueNumber = await _context.ValueNumbers.Where(x => x.FormDegerId == id).ToListAsync();
                        var degerTarih = await _context.DegerTarihs.Where(x => x.FormDegerId == id).ToListAsync();

                        enumVeriList.ForEach(x => x.IsDeleted = true);
                        valueText.ForEach(x => x.IsDeleted = true);
                        valueNumber.ForEach(x => x.IsDeleted = true);
                        degerTarih.ForEach(x => x.IsDeleted = true);

                        result = await _formDegerService.DeleteAsync(formDeger);

                        //await FeedApplicationData.InitFormVeri(_context);

                        return Result<Object>.Success(new { deleted = result });

                    }
                case "EnumVeri":
                    {
                        await _enumVeriService.DeleteAsync(x => x.Id == id);
                        return Result<Object>.Success(new { deleted = true });
                    }
                default:
                    return null;
            }
        }

        /* <auto-generated (for-script-Save)/> */
        [HttpPost("SaveFormTanim")]
        public async Task<Result<FormTanimDto>> SaveFormTanim([FromForm] FormTanimDto dto)
        {
            try
            {
                Result<FormTanimDto> result;
                if (dto.Id == 0)
                {
                    result = await _formTanimService.AddAsync(dto);

                    if (result.Status != ResultStatus.Ok)
                    {
                        var errors = new List<ValidationError>();
                        foreach (var error in result.ValidationErrors)
                        {
                            errors.Add(new ValidationError()
                            {
                                Identifier = error.Identifier,
                                ErrorMessage = error.ErrorMessage
                            });
                        }
                        return Result<FormTanimDto>.Invalid(errors);
                    }
                }
                else
                {
                    result = await _formTanimService.UpdateAsync(dto);
                }

                return result.Status switch
                {
                    ResultStatus.Ok => Result<FormTanimDto>.Success(result.Value),
                    ResultStatus.Error => Result<FormTanimDto>.Error(),
                    ResultStatus.Forbidden => Result<FormTanimDto>.Forbidden(),
                    ResultStatus.Invalid => Result<FormTanimDto>.Invalid(result.ValidationErrors),
                    ResultStatus.NotFound => Result<FormTanimDto>.NotFound(),
                    _ => null
                };
            }
            catch (Exception ex)
            {
                return Result<FormTanimDto>.Error(ex.Message);
            }
        }

        [HttpPost("SaveEnumVeri")]
        public async Task<Result<EnumVeriDto>> SaveEnumVeri([FromForm] EnumVeriDto dto)
        {
            try
            {
                Result<EnumVeriDto> result;
                if (dto.Id == 0)
                {
                    result = await _enumVeriService.AddAsync(dto);
                }

                else
                {
                    result = await _enumVeriService.UpdateAsync(dto);
                }

                return result.Status switch
                {
                    ResultStatus.Ok => Result<EnumVeriDto>.Success(result.Value),
                    ResultStatus.Error => Result<EnumVeriDto>.Error(),
                    ResultStatus.Forbidden => Result<EnumVeriDto>.Forbidden(),
                    ResultStatus.Invalid => Result<EnumVeriDto>.Invalid(result.ValidationErrors.Select(error => new ValidationError() { Identifier = error.Identifier, ErrorMessage = error.ErrorMessage }).ToList()),
                    ResultStatus.NotFound => Result<EnumVeriDto>.NotFound(),
                    _ => null
                };
            }
            catch (Exception ex)
            {
                return Result<EnumVeriDto>.Error(ex.Message);
            }
        }

        [HttpPost("LoadDataCol/{Id}")]
        public async Task<Result<Object>> LoadDataCol(long Id)
        {
            return (await _formTanimService.LoadDataColAsync(Id)).Value;
        }

        [HttpGet("GetEnumList/{FType}")]
        public async Task<Result<Object>> GetEnumList(string FType)
        {
            return (await _enumVeriService.GetEnumListAsync(FType)).Value;
        }

        [HttpPost("GetEnumListTable/{FType}")]
        public async Task<Result<JsonResult>> GetEnumListTable(string FType)
        {
            var vm = new DataTableViewModel(Request);
            return await _enumVeriService.GetEnumListTableAsync(vm, FType);
        }

        #region formAlan

        [HttpPost("SaveFormAlan")]
        public async Task<Result<FormAlanDto>> SaveFormAlan([FromForm] FormAlanDto dto)
        {
            try
            {
                Result<FormAlanDto> result;
                if (dto.Id == 0)
                {
                    result = await _formAlanService.AddAsync(dto);

                    if (result.Status != ResultStatus.Ok)
                    {
                        var errors = new List<ValidationError>();
                        foreach (var error in result.ValidationErrors)
                        {
                            errors.Add(new ValidationError()
                            {
                                Identifier = error.Identifier,
                                ErrorMessage = error.ErrorMessage
                            });
                        }

                        return Result<FormAlanDto>.Invalid(errors);
                    }
                }
                else
                {
                    result = await _formAlanService.UpdateAsync(dto);
                }

                return result.Status switch
                {
                    ResultStatus.Ok => Result<FormAlanDto>.Success(result.Value),
                    ResultStatus.Error => Result<FormAlanDto>.Error(),
                    ResultStatus.Forbidden => Result<FormAlanDto>.Forbidden(),
                    ResultStatus.Invalid => Result<FormAlanDto>.Invalid(result.ValidationErrors),
                    ResultStatus.NotFound => Result<FormAlanDto>.NotFound(),
                    _ => null
                };
            }
            catch (Exception ex)
            {
                return Result<FormAlanDto>.Error(ex.Message);
            }
        }
        #endregion

        #region FormsData
        [HttpPost("GetFormData")]
        public async Task<Result<FormDataList>> GetFormData([FromForm] FormDataList dto)
        {

            var formDeger = await _formDegerService.GetAsync(dto.Id);
            dto.Id = formDeger.Value.Id;
            dto.Success = true;
            dto.Message = "";
            List<FormData> DataList = new List<FormData>();
            var valueTextList = await _valueTextService.GetAll(dto.Id);
            var valueNumberList = await _valueNumberService.GetAll(dto.Id);
            var degerTarihList = await _degerTarihService.GetAll(dto.Id);
            foreach (var item in valueTextList.Value)
            {
                FormData formData = new FormData();
                formData.Name = item.FormAlanId.ToString();
                formData.Value = item.Deger;
                DataList.Add(formData);
            }
            foreach (var item in valueNumberList.Value)
            {
                FormData formData = new FormData();
                formData.Name = item.FormAlanId.ToString();
                formData.Value = item.Deger.ToString();
                DataList.Add(formData);
            }
            foreach (var item in degerTarihList.Value)
            {
                FormData formData = new FormData();
                formData.Name = item.FormAlanId.ToString();
                formData.Value = item.Deger.ToString();
                DataList.Add(formData);
            }
            dto.DataList = DataList;

            return Result<FormDataList>.Success(dto);
        }

        [HttpGet("GetFormDataCache/{formName}/{Id}")]
        public async Task<Result<string>> GetFormDataCache(string formName, long Id)
        {
            var enumDeger = ApplicationData.EnumVeriList.Where(x => x.EnumTanimAd == "Enm" + formName && x.Deger == Id).FirstOrDefault();
            if (enumDeger != null)
                return Result<string>.Success(enumDeger.Ad);

            //var deger = SeedData.GetFormData(Id);  // neden

            var deger = SeedData.GetFormExtData(Id, "Ad");

            return Result<string>.Success(deger);
        }

        [HttpPost("SaveFormData")]
        public async Task<Result<FormDataList>> SaveFormData([FromForm] FormDataList dto)
        {
            FormDegerDto formDegerDto = new FormDegerDto();
            formDegerDto.Id = dto.Id;
            formDegerDto.FormTanimId = dto.FormTanimId;
            bool existForm = true;
            try
            {
                if (dto.Id == 0)
                {
                    existForm = false;
                    var result = await _formDegerService.AddAsync(formDegerDto);
                    if (result.Status != ResultStatus.Ok)
                    {
                        var errorMessage = result.Errors.ToString();

                    }
                    if (result.Status != ResultStatus.Ok)
                    {
                        var errors = new List<ValidationError>();
                        foreach (var error in result.ValidationErrors)
                        {
                            errors.Add(new ValidationError()
                            {
                                Identifier = error.Identifier,
                                ErrorMessage = error.ErrorMessage
                            });
                        }
                        return Result<FormDataList>.Invalid(errors);
                    }
                    formDegerDto = result.Value;
                    dto.Id = formDegerDto.Id;

                    //logla(user
                }

                //deger tabloları doldur.
                var formAlanBilgi = await _formAlanService.GetAllAsync(formDegerDto.FormTanimId);
                if (formAlanBilgi.Status == ResultStatus.Ok)
                    foreach (var item in formAlanBilgi.Value)
                    {
                        var saveItem = dto.DataList.Find(x => x.Name == "ti_" + item.Id.ToString());
                        if (saveItem == null)
                            saveItem = dto.DataList.Find(x => x.Name.StartsWith("ti_" + item.Id.ToString() + "_"));
                        if (saveItem != null)
                        {
                            var VeriTipx = item.VeriTip;
                            if (item.VeriTip == EnmVeriTip.Number || item.VeriTip == EnmVeriTip.Bool)
                            {
                                decimal deger = 0;
                                if (saveItem.Value != null)
                                {
                                    if (item.VeriTip == EnmVeriTip.Bool)
                                    {
                                        deger = saveItem.Value.ToString().ToLower() == "true" ? 1 : 0;
                                    }
                                    else
                                        deger = decimal.Parse(saveItem.Value.ToString());
                                }
                                ValueNumberDto valueNumberDto = new ValueNumberDto();
                                if (existForm)
                                    valueNumberDto = _valueNumberService.GetByFormInfo(dto.Id, item.Id);
                                if (valueNumberDto == null)
                                    valueNumberDto = new ValueNumberDto();

                                valueNumberDto.Deger = deger;
                                valueNumberDto.FormAlanId = item.Id;
                                valueNumberDto.FormDegerId = formDegerDto.Id;
                                valueNumberDto.FormTanimId = formDegerDto.FormTanimId;

                                var resultSayi = await _valueNumberService.Update(valueNumberDto);
                            }

                            else if (item.VeriTip == EnmVeriTip.Date)
                            {
                                DegerTarihDto degerTarihDto = new DegerTarihDto();
                                if (existForm)
                                    degerTarihDto = _degerTarihService.GetByFormInfo(dto.Id, item.Id);
                                if (degerTarihDto == null)
                                    degerTarihDto = new DegerTarihDto();

                                if (saveItem.Value != null)
                                    degerTarihDto.Deger = DateTime.Parse(saveItem.Value.ToString());
                                else
                                    degerTarihDto.Deger = DateTime.MinValue;
                                degerTarihDto.FormAlanId = item.Id;
                                degerTarihDto.FormDegerId = formDegerDto.Id;
                                degerTarihDto.FormTanimId = formDegerDto.FormTanimId;

                                var resultTarih = await _degerTarihService.Update(degerTarihDto);
                            }
                            else
                            {
                                ValueTextDto valueTextDto = new ValueTextDto();
                                if (existForm)
                                    valueTextDto = _valueTextService.GetByFormInfo(dto.Id, item.Id);
                                if (valueTextDto == null)
                                    valueTextDto = new ValueTextDto();
                                if (saveItem.Value != null)
                                    valueTextDto.Deger = saveItem.Value.ToString().Trim();
                                else
                                    valueTextDto.Deger = "";

                                valueTextDto.FormAlanId = item.Id;
                                valueTextDto.FormDegerId = formDegerDto.Id;
                                valueTextDto.FormTanimId = formDegerDto.FormTanimId;

                                var resultMetin = await _valueTextService.Update(valueTextDto);
                            }
                        }
                    }

                return Result<FormDataList>.Success(dto);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
                return null;
            }
        }

        [HttpGet("GetComboData/{NormalizeAd}/{colAd}")]
        public async Task<Result<Object>> GetComboData(string NormalizeAd, string colAd)
        {
            var valData = colAd.Split('|');
            var colAdSplitted = valData[0].Split(',');

            var formTanim = ApplicationData.FormTanimList.Where(x => x.Value.NormalizeAd == NormalizeAd).FirstOrDefault();

            List<FormData> DataList = new List<FormData>();
            Dictionary<string, string> alanList = new Dictionary<string, string>();
            var formData = ApplicationData.FormDataList.Where(x => x.FormTanimId == formTanim.Key).ToList();
            foreach (var itemCol in colAdSplitted)
            {
                var colDegerler = formData.Where(x => x.FormAlanAd == itemCol);
                foreach (var colDeger in colDegerler)
                {
                    var existData = DataList.Where(x => x.Id == colDeger.FormDegerId).FirstOrDefault();
                    if (existData == null)
                    {
                        FormData newData = new FormData();
                        newData.Name = colDeger.DegerBilgi;
                        newData.Value = colDeger.FormDegerId.xToString();
                        newData.Id = colDeger.FormDegerId;
                        DataList.Add(newData);
                    }
                    else
                        existData.Name += " " + colDeger.DegerBilgi;
                }
            }
            if (valData.Length > 1)
            {
                var colDegerler = formData.Where(x => x.FormAlanAd == valData[1]);
                foreach (var colDeger in colDegerler)
                {
                    var existData = DataList.Where(x => x.Id == colDeger.FormDegerId).FirstOrDefault();

                    existData.Value = colDeger.DegerBilgi;
                }
            }

            return DataList;
        }


        [HttpPost("GetTableData/{NormalizeAd}/{colAd}/{rule?}")]
        public async Task<Result<JsonResult>> GetTableData(string NormalizeAd, string colAd, string rule)
        {
            var vm = new DataTableViewModel(Request);

            var colAdSplitted = colAd.Split(',');
            var colAdData = colAdSplitted[0];
            var formTanim = ApplicationData.FormTanimList.Where(x => x.Value.NormalizeAd == NormalizeAd).FirstOrDefault();

            List<FormData> DataList = new List<FormData>();
            Dictionary<string, string> alanList = new Dictionary<string, string>();
            foreach (var itemCol in colAdSplitted)
            {
                var formAlan = ApplicationData.FormAlanList.Where(x => x.Value.FormTanimId == formTanim.Value.Id && x.Value.Ad == itemCol).FirstOrDefault();

                if (formAlan.Value.VeriTip == EnmVeriTip.Number)
                {
                    var valueNumberList = ApplicationData.ValueNumberList.Where(x => x.Value.FormTanimId == formTanim.Value.Id && x.Value.FormAlanId == formAlan.Value.Id).OrderBy(x => x.Value.Deger);
                    foreach (var item in valueNumberList)
                    {
                        if (alanList.ContainsKey(item.Value.FormDegerId.ToString()))
                            alanList[item.Value.FormDegerId.ToString()] += " " + item.Value.Deger.ToString();
                        else
                            alanList.Add(item.Value.FormDegerId.ToString(), item.Value.Deger.ToString());
                    }
                }
                else if (formAlan.Value.VeriTip == EnmVeriTip.Date)
                {

                    var degerTarihList = ApplicationData.DegerTarihList.Where(x => x.Value.FormTanimId == formTanim.Value.Id && x.Value.FormAlanId == formAlan.Value.Id).OrderBy(x => x.Value.Deger);

                    foreach (var item in degerTarihList)
                    {
                        if (alanList.ContainsKey(item.Value.FormDegerId.ToString()))
                            alanList[item.Value.FormDegerId.ToString()] += " " + item.Value.Deger.ToString();
                        else
                            alanList.Add(item.Value.FormDegerId.ToString(), item.Value.Deger.ToString());
                    }
                }
                else
                {
                    var valueTextList = ApplicationData.ValueTextList.Where(x => x.Value.FormTanimId == formTanim.Value.Id && x.Value.FormAlanId == formAlan.Value.Id).OrderBy(x => x.Value.Deger);
                    foreach (var item in valueTextList)
                    {
                        if (alanList.ContainsKey(item.Value.FormDegerId.ToString()))
                            alanList[item.Value.FormDegerId.ToString()] += " " + item.Value.Deger.ToString();
                        else
                            alanList.Add(item.Value.FormDegerId.ToString(), item.Value.Deger.ToString());
                    }
                }
            }

            foreach (var item in alanList)
            {
                FormData formData = new FormData();
                formData.Name = item.Key;
                formData.Value = item.Value;

                DataList.Add(formData);

            }
            var query = new List<FormData>();
            query = DataList.ToList();

            int recordsTotal = query.Count;
            int recordsFiltered = query.Count();
            var data = query.Skip(vm.Skip).Take(vm.PageSize).ToList();

            return Result.Success(new JsonResult(new
            {
                draw = vm.Draw,
                recordsFiltered = recordsFiltered,
                recordsTotal = recordsTotal,
                data = data
            }));
        }
        #endregion
    }
}
