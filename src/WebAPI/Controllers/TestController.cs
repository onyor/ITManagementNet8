using Ardalis.Result;
using AutoMapper;
using ITX.Application.Dtos.ReportManagement;
using ITX.Application.Dtos.Test;
using ITX.Application.Interfaces.Test;
using ITX.Application.ViewModels;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace ITX.WebAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    [AllowAnonymous]
    public class TestController : BaseController
    {
        private readonly IMapper _mapper;
        private readonly ILessonService _lessonService;
        private readonly IStudentLessonService _studentLessonService;
        private readonly IStudentService _studentService;
        private readonly IScenarioService _scenarioService;

        public TestController(IMapper mapper,
            ILessonService lessonService,
            IStudentLessonService studentLessonService,
            IStudentService studentService,
            IScenarioService scenarioService
            )
        {
            _mapper = mapper;
            _lessonService = lessonService;
            _studentLessonService = studentLessonService;
            _studentService = studentService;
            _scenarioService = scenarioService;
        }


        [HttpGet("TestGraphQL")]
        public async Task<Result<string>> TestGraphQL()
        {
            //var schema = Schema.For(@"
            //  type Query {
            //    hello: String
            //  }
            //");

            //var root = new { Hello = "Hello World!" };
            //var json = await schema.ExecuteAsync(_ =>
            //{
            //    _.Query = "{ hello }";
            //    _.Root = root;
            //});

            return "";
        }


        [HttpPost("RequestReportViewModel")]
        public async Task<Result<JsonResult>> RequestReportViewModel([FromForm] List<SearchParameterDto> searchParameterDto)
        {
            var vm = new DataTableViewModel(Request);

            return await _scenarioService.RequestReportViewModel(
                vm,
                searchParameterDto,
                predicate: x => !x.IsDeleted,
                includes: new string[] { "CurrencyDefinition", "Country", "City", "Students" });
        }

        [HttpPost("LoadDataTable/{FType}/{UstId?}")]
        public async Task<Result<JsonResult>> LoadDataTable(string FType, long? UstId)
        {
            var vm = new DataTableViewModel(Request);
            vm.UstId = UstId;

            return FType switch
            {
                /* <auto-generated (for-script-LoadDataTable)/> */
                "Lesson" => await _lessonService.LoadDataTableAsync(vm),
                "StudentLesson" => await _studentLessonService.LoadDataTableAsync(vm),
                "Student" => await _studentService.LoadDataTableAsync(vm, includes: new string[] { "City", "Scenario", "StudentLessons.Lesson" }),
                "Scenario" => await _scenarioService.LoadDataTableAsync(vm, includes: new string[] { "CurrencyDefinition", "Country", "City" }),
                _ => null
            };
        }

        [HttpGet("Get/{FType}/{id}")]
        public async Task<Result<Object>> Get(string FType, long id)
        {
            return FType switch
            {
                /* <auto-generated (for-script-Get)/> */
                "Lesson" => (await _lessonService.GetAsync(x => x.Id == id)).Value,
                "StudentLesson" => (await _studentLessonService.GetAsync(x => x.Id == id)).Value,
                "Student" => (await _studentService.GetAsync(x => x.Id == id, includes: new string[] { "City", "Scenario", "StudentLessons" })).Value,
                "Scenario" => (await _scenarioService.GetAsync(x => x.Id == id)).Value,
                _ => null
            };
        }

        [HttpGet("GetAll/{FType?}/{UstId?}")]
        public async Task<Result<Object>> GetAll(string FType, long? UstId)
        {
            return FType switch
            {
                /* <auto-generated (for-script-GetAll)/> */
                "Lesson" => (await _lessonService.GetAllAsync()).Value,
                "StudentLesson" => (await _studentLessonService.GetAllAsync()).Value,
                "Student" => (await _studentService.GetAllAsync(includes: new string[] { "City", "Scenario" })).Value,
                "Scenario" => (await _scenarioService.GetAllAsync()).Value,

                _ => null
            };
        }

        [HttpDelete("Delete/{FType}/{id}")]
        public async Task<Result<Object>> Delete(string FType, long id)
        {
            switch (FType)
            {
                /* <auto-generated (for-script-Delete)/> */
                case "Lesson":
                    {
                        await _lessonService.DeleteAsync(x => x.Id == id);
                        return Result<Object>.Success(new { deleted = true });
                    }
                case "StudentLesson":
                    {
                        await _studentLessonService.DeleteAsync(x => x.Id == id);
                        return Result<Object>.Success(new { deleted = true });
                    }
                case "Student":
                    {
                        await _studentService.DeleteAsync(x => x.Id == id);
                        return Result<Object>.Success(new { deleted = true });
                    }
                case "Scenario":
                    {
                        await _scenarioService.DeleteAsync(x => x.Id == id);
                        return Result<Object>.Success(new { deleted = true });
                    }

                default:
                    return null;
            }
        }

        /* <auto-generated (for-script-Save)/> */


        [HttpPost("SaveLesson")]
        public async Task<Result<LessonDto>> SaveLesson([FromForm] LessonDto dto)
        {
            try
            {
                Result<LessonDto> result;
                if (dto.Id == 0)
                {
                    result = await _lessonService.AddAsync(dto);
                }

                else
                {
                    result = await _lessonService.UpdateAsync(dto);

                }

                return result.Status switch
                {
                    ResultStatus.Ok => Result<LessonDto>.Success(result.Value),
                    ResultStatus.Error => Result<LessonDto>.Error(),
                    ResultStatus.Forbidden => Result<LessonDto>.Forbidden(),
                    ResultStatus.Invalid => Result<LessonDto>.Invalid(result.ValidationErrors),
                    ResultStatus.NotFound => Result<LessonDto>.NotFound(),
                    _ => null
                };
            }
            catch (Exception ex)
            {
                return Result<LessonDto>.Error(ex.Message);
            }
        }


        [HttpPost("SaveStudentLesson")]
        public async Task<Result<StudentLessonDto>> SaveStudentLesson([FromForm] StudentLessonDto dto)
        {
            try
            {
                Result<StudentLessonDto> result;
                if (dto.Id == 0)
                {
                    result = await _studentLessonService.AddAsync(dto);
                }

                else
                {
                    result = await _studentLessonService.UpdateAsync(dto);

                }

                return result.Status switch
                {
                    ResultStatus.Ok => Result<StudentLessonDto>.Success(result.Value),
                    ResultStatus.Error => Result<StudentLessonDto>.Error(),
                    ResultStatus.Forbidden => Result<StudentLessonDto>.Forbidden(),
                    ResultStatus.Invalid => Result<StudentLessonDto>.Invalid(result.ValidationErrors),
                    ResultStatus.NotFound => Result<StudentLessonDto>.NotFound(),
                    _ => null
                };
            }
            catch (Exception ex)
            {
                return Result<StudentLessonDto>.Error(ex.Message);
            }
        }


        [HttpPost("SaveStudent")]
        public async Task<Result<StudentDto>> SaveStudent([FromForm] StudentDto dto)
        {
            try
            {
                Result<StudentDto> result;
                if (dto.Id == 0)
                {
                    result = await _studentService.AddAsync(dto);
                }

                else
                {
                    result = await _studentService.UpdateAsync(dto);
                }

                if (result.IsSuccess)
                {
                    var studentLessons = await _studentLessonService.UpdateOrAddEntitiesAsync(
                            x => x.StudentId == result.Value.Id,
                            dto.LessonIds,
                            id => new StudentLessonDto { StudentId = result.Value.Id, LessonId = id },
                            entity => entity.LessonId
                    );
                }

                return result.Status switch
                {
                    ResultStatus.Ok => Result<StudentDto>.Success(result.Value),
                    ResultStatus.Error => Result<StudentDto>.Error(),
                    ResultStatus.Forbidden => Result<StudentDto>.Forbidden(),
                    ResultStatus.Invalid => Result<StudentDto>.Invalid(result.ValidationErrors),
                    ResultStatus.NotFound => Result<StudentDto>.NotFound(),
                    _ => null
                };
            }
            catch (Exception ex)
            {
                return Result<StudentDto>.Error(ex.Message);
            }
        }


        [HttpPost("SaveScenario")]
        public async Task<Result<ScenarioDto>> SaveScenario([FromForm] ScenarioDto dto)
        {
            try
            {
                Result<ScenarioDto> result;
                if (dto.Id == 0)
                {
                    result = await _scenarioService.AddAsync(dto);
                }

                else
                {
                    result = await _scenarioService.UpdateAsync(dto);

                }

                return result.Status switch
                {
                    ResultStatus.Ok => Result<ScenarioDto>.Success(result.Value),
                    ResultStatus.Error => Result<ScenarioDto>.Error(),
                    ResultStatus.Forbidden => Result<ScenarioDto>.Forbidden(),
                    ResultStatus.Invalid => Result<ScenarioDto>.Invalid(result.ValidationErrors),
                    ResultStatus.NotFound => Result<ScenarioDto>.NotFound(),
                    _ => null
                };
            }
            catch (Exception ex)
            {
                return Result<ScenarioDto>.Error(ex.Message);
            }
        }

    }
}




