using Ardalis.Result;
using AutoMapper;
using ITX.Application;
using ITX.Application.Dtos.Identity;
using ITX.Application.Dtos.ReportManagement;
using ITX.Application.Interfaces.Identity;
using ITX.Application.Interfaces.Predefined;
using ITX.Application.ViewModels;
using ITX.Persistance.Extensions;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Reflection;
using System.Threading.Tasks;

namespace ITX.WebAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class IdentityController : BaseController
    {
        private readonly IMapper _mapper;
        private readonly IClaimTypeService _claimTypeService;
        private readonly IUserClaimService _userClaimService;
        private readonly IRoleClaimService _roleClaimService;
        private readonly IMenuService _menuService;
        private readonly IRoleService _roleService;
        private readonly IUserService _userService;
        private readonly HttpClient _httpClient;

        public IdentityController(IMapper mapper, IClaimTypeService claimTypeService,
            IRoleClaimService roleClaimService,
            IUserClaimService userClaimService,
            IMenuService menuService,
            IRoleService roleService,
            IUserService userService,
            IHttpClientFactory httpClientFactory)
        {
            _mapper = mapper;
            _claimTypeService = claimTypeService;
            _userClaimService = userClaimService;
            _roleClaimService = roleClaimService;
            _menuService = menuService;
            _roleService = roleService;
            _userService = userService;
            _httpClient = httpClientFactory.CreateClient();
        }

        [HttpPost("LoadDataTable/{FType}/{UstId?}")]
        public async Task<Result<JsonResult>> LoadDataTable(string FType, long? UstId)
        {
            var vm = new DataTableViewModel(Request);
            vm.UstId = UstId;

            return FType switch
            {
                /* <auto-generated (for-script-LoadDataTable)/> */
                "ClaimType" => await _claimTypeService.LoadDataTableAsync(vm),
                "UserClaim" => await _userClaimService.LoadDataTableAsync(vm, includes: new string[] { "User" }),
                "RoleClaim" => await _roleClaimService.LoadDataTableAsync(vm, includes: new string[] { "Role" }),
                "Menu" => await _menuService.LoadDataTableAsync(vm),
                "Role" => await _roleService.LoadDataTableAsync(vm),
                "User" => await _userService.LoadDataTableAsync(vm),
                _ => null
            };
        }

        [HttpGet("Get/{FType}/{id?}")]
        public async Task<Result<Object>> Get(string FType, string id)
        {
            return FType switch
            {
                /* <auto-generated (for-script-Get)/> */
                "ClaimType" => (await _claimTypeService.GetAsync(x => x.Id == id.xToLong())).Value,
                "UserClaim" => (await _userClaimService.GetAsync(x => x.Id == id.xToInt())).Value,
                "RoleClaim" => (await _roleClaimService.GetAsync(x => x.Id == id.xToInt())).Value,
                "Menu" => (await _menuService.GetAsync(x => x.Id == id.xToLong(), includes: new string[] { "MenuRoles" })).Value,
                "Role" => (await _roleService.GetAsync(x => x.Id == Guid.Parse(id))).Value,
                "User" => (await _userService.GetAsync(x => x.Id == Guid.Parse(id))).Value,
                _ => null
            };
        }

        [HttpGet("GetAll/{FType}/{UstId?}")]
        public async Task<Result<Object>> GetAll(string FType, long? UstId)
        {
            return FType switch
            {
                /* <auto-generated (for-script-GetAll)/> */
                "ClaimType" => (await _claimTypeService.GetAllAsync()).Value,
                "UserClaim" => (await _userClaimService.GetAllAsync()).Value,
                "RoleClaim" => (await _roleClaimService.GetAllAsync()).Value,
                "Menu" => (await _menuService.GetAllAsync()).Value,
                "Role" => (await _roleService.GetAllAsync()).Value,
                "User" => (await _userService.GetAllAsync()).Value,
                _ => null
            };
        }

        [HttpDelete("Delete/{FType}/{id}")]
        public async Task<Result<Object>> Delete(string FType, string id)
        {
            switch (FType)
            {
                /* <auto-generated (for-script-Delete)/> */
                case "ClaimType":
                    {
                        await _claimTypeService.DeleteAsync(x => x.Id == id.xToLong());
                        return Result<Object>.Success(new { deleted = true });
                    }
                case "UserClaim":
                    {
                        await _userClaimService.DeleteAsync(x => x.Id == id.xToInt());
                        return Result<Object>.Success(new { deleted = true });
                    }
                case "Role":
                    {
                        await _roleService.DeleteAsync(x => x.Id == Guid.Parse(id));
                        return Result<Object>.Success(new { deleted = true });
                    }
                case "RoleClaim":
                    {
                        await _roleClaimService.DeleteAsync(x => x.Id == id.xToInt());
                        return Result<Object>.Success(new { deleted = true });
                    }
                case "Menu":
                    {
                        await _menuService.DeleteAsync(x => x.Id == id.xToLong());
                        return Result<Object>.Success(new { deleted = true });
                    }
                case "User":
                    {
                        await _userService.DeleteAsync(x => x.Id == Guid.Parse(id));
                        return Result<Object>.Success(new { deleted = true });
                    }
                default:
                    return null;
            }
        }

        /* <auto-generated (for-script-Save)/> */

        [HttpPost("SaveClaimType")]
        public async Task<Result<ClaimTypeDto>> SaveClaimType([FromForm] ClaimTypeDto dto)
        {
            try
            {
                Result<ClaimTypeDto> result;
                if (dto.Id == 0)
                {
                    result = await _claimTypeService.AddAsync(dto);
                }

                else
                {
                    result = await _claimTypeService.UpdateAsync(dto);

                }

                return result.Status switch
                {
                    ResultStatus.Ok => Result<ClaimTypeDto>.Success(result.Value),
                    ResultStatus.Error => Result<ClaimTypeDto>.Error(),
                    ResultStatus.Forbidden => Result<ClaimTypeDto>.Forbidden(),
                    ResultStatus.Invalid => Result<ClaimTypeDto>.Invalid(result.ValidationErrors),
                    ResultStatus.NotFound => Result<ClaimTypeDto>.NotFound(),
                    _ => null
                };
            }
            catch (Exception ex)
            {
                return Result<ClaimTypeDto>.Error(ex.Message);
            }
        }

        [HttpPost("SaveMenu")]
        public async Task<Result<MenuDto>> SaveMenu([FromForm] MenuDto dto)
        {
            try
            {
                if (dto.Id == 0)
                {
                    var result = await _menuService.AddAsync(dto);
                    if (result.Status != ResultStatus.Ok)
                    {
                        var errors = new List<ValidationError>();
                        foreach (var error in result.ValidationErrors)
                        {
                            errors.Add(new ValidationError()
                            {
                                Identifier = error.Identifier,
                                ErrorMessage = error.ErrorMessage
                            });
                        }

                        return Result<MenuDto>.Invalid(errors);
                    }
                    return Result<MenuDto>.Success(result.Value);
                }

                var menuUpdated = await _menuService.UpdateAsync(dto);

                if (menuUpdated.Status != ResultStatus.Ok)
                {
                    var response = await _httpClient.GetAsync("Menus/GetMenusByUrl");
                    if (response.StatusCode != HttpStatusCode.NotFound)
                    {
                        var menuscontent = await response.Content.ReadAsStringAsync();
                        var menurolelist = JsonConvert.DeserializeObject<Dictionary<string, List<MenuRoleDto>>>(menuscontent);
                        ApplicationData.MenuRoleList = menurolelist;
                    }
                }

                return Result<MenuDto>.Success(menuUpdated);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
                return null;
            }
        }

        [HttpPost("SaveRole")]
        public async Task<Result<RoleDto>> SaveRole([FromForm] RoleDto dto)
        {
            try
            {
                Result<RoleDto> result;
                if (dto.Id == Guid.Empty)
                {
                    result = await _roleService.AddAsync(dto);
                }
                else
                {
                    result = await _roleService.UpdateAsync(dto);
                }

                return result.Status switch
                {
                    ResultStatus.Ok => Result<RoleDto>.Success(result.Value),
                    ResultStatus.Error => Result<RoleDto>.Error(),
                    ResultStatus.Forbidden => Result<RoleDto>.Forbidden(),
                    ResultStatus.Invalid => Result<RoleDto>.Invalid(result.ValidationErrors),
                    ResultStatus.NotFound => Result<RoleDto>.NotFound(),
                    _ => null
                };
            }
            catch (Exception ex)
            {
                return Result<RoleDto>.Error(ex.Message);
            }
        }

        [HttpPost("SaveUserClaim")]
        public async Task<Result<UserClaimDto>> SaveUserClaim([FromForm] UserClaimDto dto)
        {
            try
            {
                dto.UpdatedAt = DateTime.Now;
                Result<UserClaimDto> result = await _userClaimService.UpdateAsync(dto);

                return result.Status switch
                {
                    ResultStatus.Ok => Result<UserClaimDto>.Success(result.Value),
                    ResultStatus.Error => Result<UserClaimDto>.Error(),
                    ResultStatus.Forbidden => Result<UserClaimDto>.Forbidden(),
                    ResultStatus.Invalid => Result<UserClaimDto>.Invalid(result.ValidationErrors),
                    ResultStatus.NotFound => Result<UserClaimDto>.NotFound(),
                    _ => null
                };
            }
            catch (Exception ex)
            {
                return Result<UserClaimDto>.Error(ex.Message);
            }
        }

        [HttpPost("SaveRoleClaim")]
        public async Task<Result<RoleClaimDto>> SaveRoleClaim([FromForm] RoleClaimDto dto)
        {
            try
            {
                dto.UpdatedAt = DateTime.Now;
                Result<RoleClaimDto> result = await _roleClaimService.UpdateAsync(dto);

                return result.Status switch
                {
                    ResultStatus.Ok => Result<RoleClaimDto>.Success(result.Value),
                    ResultStatus.Error => Result<RoleClaimDto>.Error(),
                    ResultStatus.Forbidden => Result<RoleClaimDto>.Forbidden(),
                    ResultStatus.Invalid => Result<RoleClaimDto>.Invalid(result.ValidationErrors),
                    ResultStatus.NotFound => Result<RoleClaimDto>.NotFound(),
                    _ => null
                };
            }
            catch (Exception ex)
            {
                return Result<RoleClaimDto>.Error(ex.Message);
            }
        }

        [HttpPost("AddBulkUserClaims")]
        public async Task<Result<bool>> SaveUserClaimAll([FromForm] BulkUserClaimsDto dto)
        {
            try
            {
                Result<UserClaimDto> UserClaimResult;
                var resultList = new List<Result<UserClaimDto>>();

                var allClaimTypes = await _claimTypeService.GetAllAsync(x => x.IsActive && !x.IsDeleted);


                foreach (var UserId in dto.UserIds)
                {
                    foreach (var claimTypeId in dto.ClaimTypeIds)
                    {
                        var UserClaimInfo = await _userClaimService.GetAsync(x => x.ClaimTypeId == claimTypeId && x.UserId == UserId, ignoreState: true);

                        if (UserClaimInfo.IsSuccess && UserClaimInfo.Value != null)
                        {
                            if (!UserClaimInfo.Value.IsActive || UserClaimInfo.Value.IsDeleted)
                            {
                                UserClaimInfo.Value.IsActive = true;
                                UserClaimInfo.Value.IsDeleted = false;

                                await _userClaimService.UpdateAsync(UserClaimInfo.Value);
                            }
                        }
                        else
                        {
                            var UserClaimDto = new UserClaimDto
                            {
                                UserId = UserId,
                                ClaimType = allClaimTypes.Value.FirstOrDefault(x => x.Id == claimTypeId).Name,
                                ClaimTypeId = claimTypeId,
                                ClaimValue = "True",
                                IsActive = true,
                                CreatedAt = DateTime.Now,
                                UpdatedAt = DateTime.Now
                            };

                            UserClaimResult = await _userClaimService.AddAsync(UserClaimDto);

                            if (UserClaimResult.Status == ResultStatus.Error)
                                return Result<bool>.Error("Ekleme sırasında bir hata meydana geldi.");
                        }
                    }
                }
                return Result<bool>.Success(true);
            }
            catch (Exception ex)
            {
                return Result<bool>.Error(ex.Message);
            }
        }

        [HttpPost("AddBulkRoleClaims")]
        public async Task<Result<bool>> SaveRoleClaimAll([FromForm] BulkRoleClaimsDto dto)
        {
            try
            {
                Result<RoleClaimDto> roleClaimResult;
                var resultList = new List<Result<RoleClaimDto>>();

                var allClaimTypes = await _claimTypeService.GetAllAsync(x => x.IsActive && !x.IsDeleted);

                foreach (var roleId in dto.RoleIds)
                {
                    foreach (var claimTypeId in dto.ClaimTypeIds)
                    {
                        var roleClaimInfo = await _roleClaimService.GetAsync(x => x.ClaimTypeId == claimTypeId && x.RoleId == roleId, ignoreState: true);

                        if (roleClaimInfo.IsSuccess && roleClaimInfo.Value != null)
                        {
                            if (!roleClaimInfo.Value.IsActive || roleClaimInfo.Value.IsDeleted)
                            {
                                roleClaimInfo.Value.IsActive = true;
                                roleClaimInfo.Value.IsDeleted = false;

                                await _roleClaimService.UpdateAsync(roleClaimInfo.Value);
                            }
                        }
                        else
                        {
                            var roleClaimDto = new RoleClaimDto
                            {
                                RoleId = roleId,
                                ClaimTypeId = claimTypeId,
                                ClaimType = allClaimTypes.Value.FirstOrDefault(x => x.Id == claimTypeId).Name,
                                ClaimValue = "True",
                                IsActive = true,
                                CreatedAt = DateTime.Now,
                                UpdatedAt = DateTime.Now,
                            };

                            roleClaimResult = await _roleClaimService.AddAsync(roleClaimDto);

                            if (roleClaimResult.Status == ResultStatus.Error)
                                return Result<bool>.Error("Ekleme sırasında bir hata meydana geldi.");
                        }
                    }
                }

                return Result<bool>.Success(true);
            }
            catch (Exception ex)
            {
                return Result<bool>.Error(ex.Message);
            }
        }

        [HttpPost("SaveUser")]
        public async Task<Result<UserDto>> SaveUser([FromForm] UserDto dto)
        {
            try
            {
                Result<UserDto> result;
                TextInfo textInfo = CultureInfo.CurrentCulture.TextInfo;
                dto.Name = textInfo.ToTitleCase(dto.Name.ToLower());
                dto.Surname = dto.Surname.ToUpper();

                if (dto.Id == Guid.Empty) // NEW USER
                {
                    result = await _userService.AddAsync(dto, dto.Password, "");
                }
                else
                {
                    result = await _userService.UpdateAsync(dto, dto.Password);
                }

                return result.Status switch
                {
                    ResultStatus.Ok => Result<UserDto>.Success(result.Value),
                    ResultStatus.Error => Result<UserDto>.Error(string.Join("<br/>", result.Errors)),
                    ResultStatus.Forbidden => Result<UserDto>.Forbidden(),
                    ResultStatus.Invalid => Result<UserDto>.Invalid(result.ValidationErrors),
                    ResultStatus.NotFound => Result<UserDto>.NotFound(),
                    _ => null
                };
            }
            catch (Exception ex)
            {
                return Result<UserDto>.Error(ex.Message);
            }
        }

        [HttpGet("ByRoleId")]
        public async Task<Result<dynamic>> GetMenuHtmlByRoleId(string roleId, string path)
            => Result<dynamic>.Success(await _menuService.GetMenusByRoleId(roleId, path));

        [HttpGet("MenuInfobyRoleId")]
        public async Task<Result<List<MenuInfoViewModel>>> GetMenuInfobyRoleId([FromQuery] string roleId, string path)
            => Result<List<MenuInfoViewModel>>.Success((List<MenuInfoViewModel>)await _menuService.GetMenuInfoByRoleId(roleId, path));

        [AllowAnonymous]
        [HttpGet("GetMenusByUrl")]
        public async Task<Result<Dictionary<string, List<MenuRoleDto>>>> GetMenusByUrl()
        {
            var result = await _menuService.GetMenusByUrl();
            return result;
        }

        [HttpGet("controllers")]
        public Result<JsonResult> GetAllControllers()
        {
            var result = Assembly.GetExecutingAssembly().GetTypes()
                .Where(type => type.Name.EndsWith("Controller"))
                //.Select(x => new { Controller = x.Name })
                .Select(x => x.Name).ToList();

            return Result.Success(new JsonResult(result));
        }

        [HttpGet("controllers/{name}")]
        public Result<JsonResult> GetControllerActions(string name)
        {
            var result = Assembly.GetExecutingAssembly().GetTypes()
                .Where(type => type.Name.EndsWith("Controller"))
                .SelectMany(type => type.GetMethods(BindingFlags.Instance | BindingFlags.DeclaredOnly | BindingFlags.Public))
                .Where(m => !m.GetCustomAttributes(typeof(System.Runtime.CompilerServices.CompilerGeneratedAttribute), true).Any())
                .GroupBy(x => x.DeclaringType.Name)
                .Where(x => x.Key.StartsWith(name))
                .Select(x => x.Select(y => y.Name)).FirstOrDefault();

            return Result<JsonResult>.Success(new JsonResult(result));
        }

        [HttpPost("LoadDataTableNotActive/{FType}/{UstId?}")]
        public async Task<Result<JsonResult>> LoadDataTableNotActive(string FType, long? UstId, [FromForm] List<SearchParameterDto> aramaKriter)
        {
            var vm = new DataTableViewModel(Request);
            vm.UstId = UstId;

            return FType switch
            {
                "User" => await _userService.LoadDataTableAsync(vm, isActive: false),
                _ => null
            };
        }

        [HttpPut("TakePassive/{FType}/{id?}")]
        public async Task<Result<bool>> ToggleIsActive(string FType, string id)
        {
            Result<bool> result = null;
            switch (FType)
            {
                case "User":
                    var userDto = await _userService.GetAsync(x => x.Id == Guid.Parse(id));
                    if (userDto == null)
                    {
                        return Result<bool>.Error();
                    }

                    userDto.Value.IsActive = !userDto.Value.IsActive;

                    result = (await _userService.UpdateAsync(userDto, "")).IsSuccess;
                    break;
                default:
                    break;
            }

            return result.Status switch
            {
                ResultStatus.Ok => Result<bool>.Success(result),
                ResultStatus.Error => Result<bool>.Error(),
                ResultStatus.Forbidden => Result<bool>.Forbidden(),
                ResultStatus.Invalid => Result<bool>.Invalid(result.ValidationErrors),
                ResultStatus.NotFound => Result<bool>.NotFound(),
                _ => null
            };
        }

        [HttpPut("{id}/role/{roleId}")]
        public async Task<Result<Object>> SetCurrentRole(Guid roleId)
        {
            var userId = Guid.Parse(HttpContext.User.Claims.First(t => t.Type == "UserId").Value);
            if (userId == Guid.Empty)
            {
                return Result.NotFound("Kullan�c� bulunamad�!");
            }

            await _userService.UpdateCurrentRoleAsync(userId, roleId);

            return Result.Success(new { currentRoleSet = true });
        }
    }
}


