// <auto-generated />
using System;
using ITX.Persistance.Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ITX.Persistance.Database.Migrations
{
    [DbContext(typeof(ITManagementDbContext))]
    partial class ITManagementDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ITX.Application.ViewModels.KeyValuePairModel", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("KeyValuePairModel");
                });

            modelBuilder.Entity("ITX.Domain.Entities.FormManagement.DegerTarih", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(94);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(95);

                    b.Property<DateTime>("Deger")
                        .HasColumnType("datetime2");

                    b.Property<long>("FormAlanId")
                        .HasColumnType("bigint");

                    b.Property<long>("FormDegerId")
                        .HasColumnType("bigint");

                    b.Property<long>("FormTanimId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(98);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnOrder(99);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(96);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(97);

                    b.HasKey("Id");

                    b.HasIndex("FormAlanId");

                    b.HasIndex("FormDegerId");

                    b.HasIndex("FormTanimId");

                    b.ToTable("DegerTarih", (string)null);
                });

            modelBuilder.Entity("ITX.Domain.Entities.FormManagement.EnumVeri", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Aciklama")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ad")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(94);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(95);

                    b.Property<int>("Deger")
                        .HasColumnType("int");

                    b.Property<long>("EnumTanimId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(98);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnOrder(99);

                    b.Property<string>("Kod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SiraNo")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(96);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(97);

                    b.HasKey("Id");

                    b.HasIndex("Ad");

                    b.HasIndex("EnumTanimId");

                    b.HasIndex("Kod");

                    b.HasIndex("SiraNo");

                    b.ToTable("EnumVeri", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Ad = "Tanımsız",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deger = 0,
                            EnumTanimId = 1L,
                            IsActive = true,
                            IsDeleted = false,
                            Kod = "Undefined",
                            SiraNo = 1
                        },
                        new
                        {
                            Id = 2L,
                            Ad = "Erkek",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deger = 10,
                            EnumTanimId = 1L,
                            IsActive = true,
                            IsDeleted = false,
                            Kod = "Erkek",
                            SiraNo = 2
                        },
                        new
                        {
                            Id = 3L,
                            Ad = "Kadın",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deger = 20,
                            EnumTanimId = 1L,
                            IsActive = true,
                            IsDeleted = false,
                            Kod = "Kadin",
                            SiraNo = 3
                        },
                        new
                        {
                            Id = 4L,
                            Ad = "Tanımsız",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deger = 0,
                            EnumTanimId = 2L,
                            IsActive = true,
                            IsDeleted = false,
                            Kod = "Undefined",
                            SiraNo = 1
                        },
                        new
                        {
                            Id = 5L,
                            Ad = "Başarılı",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deger = 10,
                            EnumTanimId = 2L,
                            IsActive = true,
                            IsDeleted = false,
                            Kod = "Basarili",
                            SiraNo = 2
                        },
                        new
                        {
                            Id = 6L,
                            Ad = "Başarısız",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deger = 20,
                            EnumTanimId = 2L,
                            IsActive = true,
                            IsDeleted = false,
                            Kod = "Basarisiz",
                            SiraNo = 3
                        },
                        new
                        {
                            Id = 7L,
                            Ad = "Hatalı",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deger = 30,
                            EnumTanimId = 2L,
                            IsActive = true,
                            IsDeleted = false,
                            Kod = "Hatali",
                            SiraNo = 4
                        },
                        new
                        {
                            Id = 8L,
                            Ad = "Tarihçe",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deger = 40,
                            EnumTanimId = 2L,
                            IsActive = true,
                            IsDeleted = false,
                            Kod = "Tarihce",
                            SiraNo = 5
                        },
                        new
                        {
                            Id = 9L,
                            Ad = "Tanımsız",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deger = 0,
                            EnumTanimId = 4L,
                            IsActive = true,
                            IsDeleted = false,
                            Kod = "Undefined",
                            SiraNo = 1
                        },
                        new
                        {
                            Id = 10L,
                            Ad = "Sayı",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deger = 10,
                            EnumTanimId = 4L,
                            IsActive = true,
                            IsDeleted = false,
                            Kod = "Sayi",
                            SiraNo = 2
                        },
                        new
                        {
                            Id = 11L,
                            Ad = "Tarih",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deger = 20,
                            EnumTanimId = 4L,
                            IsActive = true,
                            IsDeleted = false,
                            Kod = "Tarih",
                            SiraNo = 3
                        },
                        new
                        {
                            Id = 12L,
                            Ad = "Bool",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deger = 30,
                            EnumTanimId = 4L,
                            IsActive = true,
                            IsDeleted = false,
                            Kod = "Bool",
                            SiraNo = 4
                        },
                        new
                        {
                            Id = 13L,
                            Ad = "Metin",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deger = 40,
                            EnumTanimId = 4L,
                            IsActive = true,
                            IsDeleted = false,
                            Kod = "Metin",
                            SiraNo = 5
                        },
                        new
                        {
                            Id = 14L,
                            Ad = "Liste Oluştur",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deger = 50,
                            EnumTanimId = 4L,
                            IsActive = true,
                            IsDeleted = false,
                            Kod = "ListeOlustur",
                            SiraNo = 6
                        },
                        new
                        {
                            Id = 15L,
                            Ad = "Mevcut Veri",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deger = 60,
                            EnumTanimId = 4L,
                            IsActive = true,
                            IsDeleted = false,
                            Kod = "MevcutVeri",
                            SiraNo = 7
                        },
                        new
                        {
                            Id = 16L,
                            Ad = "Bağlı Veri",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deger = 70,
                            EnumTanimId = 4L,
                            IsActive = true,
                            IsDeleted = false,
                            Kod = "BagliVeri",
                            SiraNo = 8
                        },
                        new
                        {
                            Id = 17L,
                            Ad = "Tanımsız",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deger = 0,
                            EnumTanimId = 5L,
                            IsActive = true,
                            IsDeleted = false,
                            Kod = "Undefined",
                            SiraNo = 1
                        },
                        new
                        {
                            Id = 18L,
                            Ad = "Başarılı",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deger = 10,
                            EnumTanimId = 5L,
                            IsActive = true,
                            IsDeleted = false,
                            Kod = "Basarili",
                            SiraNo = 2
                        },
                        new
                        {
                            Id = 19L,
                            Ad = "Başarısız",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deger = 20,
                            EnumTanimId = 5L,
                            IsActive = true,
                            IsDeleted = false,
                            Kod = "Basarisiz",
                            SiraNo = 3
                        },
                        new
                        {
                            Id = 20L,
                            Ad = "Hatalı",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deger = 30,
                            EnumTanimId = 5L,
                            IsActive = true,
                            IsDeleted = false,
                            Kod = "Hatali",
                            SiraNo = 4
                        },
                        new
                        {
                            Id = 21L,
                            Ad = "Tarihçe",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deger = 40,
                            EnumTanimId = 5L,
                            IsActive = true,
                            IsDeleted = false,
                            Kod = "Tarihce",
                            SiraNo = 5
                        });
                });

            modelBuilder.Entity("ITX.Domain.Entities.FormManagement.FormAlan", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Aciklama")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(94);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(95);

                    b.Property<string>("Etiket")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FormTanimId")
                        .HasColumnType("bigint");

                    b.Property<string>("Ipucu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(98);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnOrder(99);

                    b.Property<string>("MaxDeger")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MinDeger")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OzelStil")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SatirSira")
                        .HasColumnType("int");

                    b.Property<int>("SutunGenislik")
                        .HasColumnType("int");

                    b.Property<int>("SutunSira")
                        .HasColumnType("int");

                    b.Property<byte>("TabloSira")
                        .HasColumnType("tinyint");

                    b.Property<string>("Tanimlayici")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(96);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(97);

                    b.Property<long?>("UstId")
                        .HasColumnType("bigint");

                    b.Property<string>("VarsayilanDeger")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VeriListe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VeriTip")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FormTanimId");

                    b.ToTable("FormAlan", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Ad = "Ad",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Etiket = "Ad",
                            FormTanimId = 1L,
                            IsActive = true,
                            IsDeleted = false,
                            SatirSira = 1,
                            SutunGenislik = 6,
                            SutunSira = 1,
                            TabloSira = (byte)1,
                            VeriTip = 40
                        },
                        new
                        {
                            Id = 2L,
                            Ad = "Aciklama",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Etiket = "Açıklama",
                            FormTanimId = 1L,
                            IsActive = true,
                            IsDeleted = false,
                            SatirSira = 1,
                            SutunGenislik = 6,
                            SutunSira = 2,
                            TabloSira = (byte)2,
                            VeriTip = 40
                        },
                        new
                        {
                            Id = 3L,
                            Ad = "Ad",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Etiket = "Ad",
                            FormTanimId = 2L,
                            IsActive = true,
                            IsDeleted = false,
                            SatirSira = 1,
                            SutunGenislik = 6,
                            SutunSira = 1,
                            TabloSira = (byte)1,
                            VeriTip = 40
                        },
                        new
                        {
                            Id = 4L,
                            Ad = "Kod",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Etiket = "Kod",
                            FormTanimId = 2L,
                            IsActive = true,
                            IsDeleted = false,
                            SatirSira = 1,
                            SutunGenislik = 6,
                            SutunSira = 2,
                            TabloSira = (byte)2,
                            VeriTip = 10
                        });
                });

            modelBuilder.Entity("ITX.Domain.Entities.FormManagement.FormDeger", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(94);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(95);

                    b.Property<long?>("EskiId")
                        .HasColumnType("bigint");

                    b.Property<long>("FormTanimId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(98);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnOrder(99);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(96);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(97);

                    b.HasKey("Id");

                    b.HasIndex("FormTanimId");

                    b.ToTable("FormDeger", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            FormTanimId = 1L,
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            FormTanimId = 1L,
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            FormTanimId = 2L,
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            FormTanimId = 1L,
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            FormTanimId = 1L,
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            FormTanimId = 1L,
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            FormTanimId = 1L,
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 8L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            FormTanimId = 1L,
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 9L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            FormTanimId = 1L,
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 10L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            FormTanimId = 1L,
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 11L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            FormTanimId = 1L,
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 12L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            FormTanimId = 1L,
                            IsActive = true,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("ITX.Domain.Entities.FormManagement.FormTanim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Aciklama")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Baslik")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(94);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(95);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(98);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnOrder(99);

                    b.Property<string>("NormalizeAd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Statik")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(96);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(97);

                    b.Property<long?>("UstId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UstId");

                    b.ToTable("FormTanim", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Aciklama = "Enum Başlık Bilgileri",
                            Ad = "Enum Tanım",
                            Baslik = "Enum Tanım",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            NormalizeAd = "EnumTanim",
                            Statik = false
                        },
                        new
                        {
                            Id = 2L,
                            Aciklama = "Ulaşım Araç Bilgileri",
                            Ad = "Ulaşım Araç",
                            Baslik = "Ulaşım Araç",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            NormalizeAd = "UlasimArac",
                            Statik = false
                        });
                });

            modelBuilder.Entity("ITX.Domain.Entities.FormManagement.FormTarihce", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(94);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(95);

                    b.Property<long>("FormDegerId")
                        .HasColumnType("bigint");

                    b.Property<long>("FormTanimId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(98);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnOrder(99);

                    b.Property<string>("JsonVeri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(96);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(97);

                    b.HasKey("Id");

                    b.HasIndex("FormDegerId");

                    b.HasIndex("FormTanimId");

                    b.ToTable("FormTarihce", (string)null);
                });

            modelBuilder.Entity("ITX.Domain.Entities.FormManagement.ValueNumber", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(94);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(95);

                    b.Property<decimal>("Deger")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("FormAlanId")
                        .HasColumnType("bigint");

                    b.Property<long>("FormDegerId")
                        .HasColumnType("bigint");

                    b.Property<long>("FormTanimId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(98);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnOrder(99);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(96);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(97);

                    b.HasKey("Id");

                    b.HasIndex("FormAlanId");

                    b.HasIndex("FormDegerId");

                    b.HasIndex("FormTanimId");

                    b.ToTable("ValueNumber", (string)null);
                });

            modelBuilder.Entity("ITX.Domain.Entities.FormManagement.ValueText", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(94);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(95);

                    b.Property<string>("Deger")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FormAlanId")
                        .HasColumnType("bigint");

                    b.Property<long>("FormDegerId")
                        .HasColumnType("bigint");

                    b.Property<long>("FormTanimId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(98);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnOrder(99);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(96);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(97);

                    b.HasKey("Id");

                    b.HasIndex("FormAlanId");

                    b.HasIndex("FormDegerId");

                    b.HasIndex("FormTanimId");

                    b.ToTable("ValueText", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deger = "EnmGender",
                            FormAlanId = 1L,
                            FormDegerId = 1L,
                            FormTanimId = 1L,
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deger = "EnmGender",
                            FormAlanId = 2L,
                            FormDegerId = 1L,
                            FormTanimId = 1L,
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deger = "EnmRequestLogTypeCode",
                            FormAlanId = 1L,
                            FormDegerId = 2L,
                            FormTanimId = 1L,
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deger = "EnmRequestLogTypeCode",
                            FormAlanId = 2L,
                            FormDegerId = 2L,
                            FormTanimId = 1L,
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deger = "Tren",
                            FormAlanId = 3L,
                            FormDegerId = 3L,
                            FormTanimId = 2L,
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deger = "10",
                            FormAlanId = 4L,
                            FormDegerId = 3L,
                            FormTanimId = 2L,
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deger = "EnmVeriTip",
                            FormAlanId = 1L,
                            FormDegerId = 4L,
                            FormTanimId = 1L,
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 8L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deger = "EnmVeriTip",
                            FormAlanId = 2L,
                            FormDegerId = 4L,
                            FormTanimId = 1L,
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 9L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deger = "EnmRequestLogTypeCode",
                            FormAlanId = 1L,
                            FormDegerId = 5L,
                            FormTanimId = 1L,
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 10L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deger = "EnmRequestLogTypeCode",
                            FormAlanId = 2L,
                            FormDegerId = 5L,
                            FormTanimId = 1L,
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 11L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deger = "EnmAppointmentType",
                            FormAlanId = 1L,
                            FormDegerId = 6L,
                            FormTanimId = 1L,
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 12L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deger = "EnmAppointmentType",
                            FormAlanId = 2L,
                            FormDegerId = 6L,
                            FormTanimId = 1L,
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 13L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deger = "EnmStatus",
                            FormAlanId = 1L,
                            FormDegerId = 7L,
                            FormTanimId = 1L,
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 14L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deger = "EnmStatus",
                            FormAlanId = 2L,
                            FormDegerId = 7L,
                            FormTanimId = 1L,
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 15L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deger = "EnmTransferType",
                            FormAlanId = 1L,
                            FormDegerId = 8L,
                            FormTanimId = 1L,
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 16L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deger = "EnmTransferType",
                            FormAlanId = 2L,
                            FormDegerId = 8L,
                            FormTanimId = 1L,
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 17L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deger = "EnmRiskStatus",
                            FormAlanId = 1L,
                            FormDegerId = 9L,
                            FormTanimId = 1L,
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 18L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deger = "EnmRiskStatus",
                            FormAlanId = 2L,
                            FormDegerId = 9L,
                            FormTanimId = 1L,
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 19L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deger = "EnmBlockType",
                            FormAlanId = 1L,
                            FormDegerId = 10L,
                            FormTanimId = 1L,
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 20L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deger = "EnmBlockType",
                            FormAlanId = 2L,
                            FormDegerId = 10L,
                            FormTanimId = 1L,
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 21L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deger = "EnmAppointmentStatus",
                            FormAlanId = 1L,
                            FormDegerId = 11L,
                            FormTanimId = 1L,
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 22L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deger = "EnmAppointmentStatus",
                            FormAlanId = 2L,
                            FormDegerId = 11L,
                            FormTanimId = 1L,
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 23L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deger = "EnmImportance",
                            FormAlanId = 1L,
                            FormDegerId = 12L,
                            FormTanimId = 1L,
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 24L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deger = "EnmImportance",
                            FormAlanId = 2L,
                            FormDegerId = 12L,
                            FormTanimId = 1L,
                            IsActive = true,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("ITX.Domain.Entities.Identity.ClaimType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(94);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(95);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(98);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnOrder(99);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(96);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(97);

                    b.HasKey("Id");

                    b.ToTable("ClaimType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Kaydet",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Save"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Düzenle",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Edit"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Sil",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Delete"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Ekle",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Add"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Dýþa Aktar",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Export"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Ýçe Aktar",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Import"
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Pasif",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Passive"
                        },
                        new
                        {
                            Id = 8L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Onayla",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Approve"
                        },
                        new
                        {
                            Id = 9L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Görüntüle",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "View"
                        },
                        new
                        {
                            Id = 10L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Excel Görüntüle",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Excel"
                        },
                        new
                        {
                            Id = 11L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Pdf Görüntüle",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Pdf"
                        },
                        new
                        {
                            Id = 12L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Anahtar",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Switch"
                        },
                        new
                        {
                            Id = 13L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Login",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "LoginAs"
                        },
                        new
                        {
                            Id = 14L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Aktif",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Active"
                        });
                });

            modelBuilder.Entity("ITX.Domain.Entities.Identity.Menu", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(94);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(95);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Icon")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(98);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnOrder(99);

                    b.Property<bool>("IsNotMenuVisible")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Param")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(96);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(97);

                    b.Property<string>("Url")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Menu", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Icon = "fas fa-user-cog",
                            IsActive = true,
                            IsDeleted = false,
                            IsNotMenuVisible = false,
                            Name = "Yönetim Paneli",
                            Order = 1
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            IsNotMenuVisible = false,
                            Name = "Sistem Tanımlamalar",
                            Order = 1,
                            ParentId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            IsNotMenuVisible = false,
                            Name = "Sistem Veri Giriş",
                            Order = 2,
                            ParentId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            IsNotMenuVisible = false,
                            Name = "Yetkilendirme",
                            Order = 3,
                            ParentId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            IsNotMenuVisible = false,
                            Name = "Duyurular",
                            Order = 4,
                            ParentId = 1L,
                            Url = "Predefined/Announce"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            IsNotMenuVisible = false,
                            Name = "Audit Log",
                            Order = 5,
                            ParentId = 4L,
                            Url = "Administration/AuditLog"
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            IsNotMenuVisible = false,
                            Name = "Form Tanım",
                            Order = 1,
                            ParentId = 2L,
                            Url = "FormYonetim/FormList"
                        },
                        new
                        {
                            Id = 8L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            IsNotMenuVisible = false,
                            Name = "Enum Tanım",
                            Order = 2,
                            Param = "1",
                            ParentId = 2L,
                            Url = "FormYonetim/VeriList"
                        },
                        new
                        {
                            Id = 9L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            IsNotMenuVisible = false,
                            Name = "Döviz Tanim",
                            Order = 3,
                            ParentId = 2L,
                            Url = "Predefined/CurrencyDefinition"
                        },
                        new
                        {
                            Id = 10L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            IsNotMenuVisible = false,
                            Name = "Enum Veri Giriş",
                            Order = 1,
                            ParentId = 3L,
                            Url = "FormYonetim/EnumVeri"
                        },
                        new
                        {
                            Id = 11L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            IsNotMenuVisible = false,
                            Name = "Form Veri Giriş",
                            Order = 2,
                            ParentId = 3L,
                            Url = "FormYonetim/VeriList"
                        },
                        new
                        {
                            Id = 12L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            IsNotMenuVisible = false,
                            Name = "Rol Tanım",
                            Order = 1,
                            ParentId = 4L,
                            Url = "Administration/Role"
                        },
                        new
                        {
                            Id = 13L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            IsNotMenuVisible = false,
                            Name = "Kullanıcı Listesi",
                            Order = 2,
                            ParentId = 4L,
                            Url = "Administration/User"
                        },
                        new
                        {
                            Id = 14L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            IsNotMenuVisible = false,
                            Name = "Menu Tanım",
                            Order = 3,
                            ParentId = 4L,
                            Url = "Administration/Menu"
                        },
                        new
                        {
                            Id = 15L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            IsNotMenuVisible = false,
                            Name = "Request Log",
                            Order = 4,
                            Param = "1",
                            ParentId = 4L,
                            Url = "Administration/RequestLog"
                        },
                        new
                        {
                            Id = 16L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            IsNotMenuVisible = false,
                            Name = "Yetki Tanımlama",
                            Order = 6,
                            ParentId = 4L,
                            Url = "Administration/AdministrationClaim"
                        },
                        new
                        {
                            Id = 17L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            IsNotMenuVisible = false,
                            Name = "Yetki Atama",
                            Order = 7,
                            ParentId = 4L,
                            Url = "Administration/ClaimType"
                        },
                        new
                        {
                            Id = 18L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Icon = "fas fa-bars",
                            IsActive = true,
                            IsDeleted = false,
                            IsNotMenuVisible = false,
                            Name = "Genel Tanımlamalar",
                            Order = 2
                        },
                        new
                        {
                            Id = 19L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            IsNotMenuVisible = false,
                            Name = "Kurumsal Tanımlamalar",
                            Order = 1,
                            ParentId = 18L
                        },
                        new
                        {
                            Id = 20L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            IsNotMenuVisible = false,
                            Name = "Parametre Ayarları",
                            Order = 1,
                            ParentId = 18L,
                            Url = "Predefined/AppSetting"
                        },
                        new
                        {
                            Id = 21L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            IsNotMenuVisible = false,
                            Name = "Ülke Tanim",
                            Order = 2,
                            ParentId = 19L,
                            Url = "Predefined/Country"
                        },
                        new
                        {
                            Id = 22L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            IsNotMenuVisible = false,
                            Name = "İl Tanim",
                            Order = 3,
                            ParentId = 19L,
                            Url = "Predefined/City"
                        },
                        new
                        {
                            Id = 23L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            IsNotMenuVisible = false,
                            Name = "İlçe Tanim",
                            Order = 4,
                            ParentId = 19L,
                            Url = "Predefined/District"
                        },
                        new
                        {
                            Id = 24L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            IsNotMenuVisible = false,
                            Name = "Tab Management",
                            Order = 5,
                            ParentId = 25L,
                            Url = "Predefined/PredefinedManagement"
                        },
                        new
                        {
                            Id = 25L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Icon = "fas fa-question",
                            IsActive = true,
                            IsDeleted = false,
                            IsNotMenuVisible = false,
                            Name = "Example",
                            Order = 1000
                        },
                        new
                        {
                            Id = 26L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            IsNotMenuVisible = false,
                            Name = "Entity Build",
                            Order = 10,
                            ParentId = 25L,
                            Url = "Test/Scenario"
                        },
                        new
                        {
                            Id = 27L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            IsNotMenuVisible = false,
                            Name = "Rapor Ekranı",
                            Order = 20,
                            ParentId = 25L,
                            Url = "Test/GeneralReport"
                        },
                        new
                        {
                            Id = 28L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            IsNotMenuVisible = false,
                            Name = "Student",
                            Order = 30,
                            ParentId = 25L,
                            Url = "Test/Student"
                        },
                        new
                        {
                            Id = 29L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            IsNotMenuVisible = false,
                            Name = "Lesson",
                            Order = 40,
                            ParentId = 25L,
                            Url = "Test/Lesson"
                        },
                        new
                        {
                            Id = 30L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            IsNotMenuVisible = false,
                            Name = "Entity Build with Param",
                            Order = 11,
                            Param = "1",
                            ParentId = 25L,
                            Url = "Test/Scenario"
                        });
                });

            modelBuilder.Entity("ITX.Domain.Entities.Identity.MenuRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(94);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(95);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(98);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnOrder(99);

                    b.Property<long>("MenuId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(96);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(97);

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("MenuId", "RoleId")
                        .IsUnique();

                    b.ToTable("MenuRole", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            MenuId = 1L,
                            RoleId = new Guid("b79f1af0-5a42-42ab-9b7f-9d3c8ae8f14e")
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            MenuId = 2L,
                            RoleId = new Guid("b79f1af0-5a42-42ab-9b7f-9d3c8ae8f14e")
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            MenuId = 3L,
                            RoleId = new Guid("b79f1af0-5a42-42ab-9b7f-9d3c8ae8f14e")
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            MenuId = 4L,
                            RoleId = new Guid("b79f1af0-5a42-42ab-9b7f-9d3c8ae8f14e")
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            MenuId = 5L,
                            RoleId = new Guid("b79f1af0-5a42-42ab-9b7f-9d3c8ae8f14e")
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            MenuId = 6L,
                            RoleId = new Guid("b79f1af0-5a42-42ab-9b7f-9d3c8ae8f14e")
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            MenuId = 7L,
                            RoleId = new Guid("b79f1af0-5a42-42ab-9b7f-9d3c8ae8f14e")
                        },
                        new
                        {
                            Id = 8L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            MenuId = 8L,
                            RoleId = new Guid("b79f1af0-5a42-42ab-9b7f-9d3c8ae8f14e")
                        },
                        new
                        {
                            Id = 9L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            MenuId = 9L,
                            RoleId = new Guid("b79f1af0-5a42-42ab-9b7f-9d3c8ae8f14e")
                        },
                        new
                        {
                            Id = 10L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            MenuId = 10L,
                            RoleId = new Guid("b79f1af0-5a42-42ab-9b7f-9d3c8ae8f14e")
                        },
                        new
                        {
                            Id = 11L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            MenuId = 11L,
                            RoleId = new Guid("b79f1af0-5a42-42ab-9b7f-9d3c8ae8f14e")
                        },
                        new
                        {
                            Id = 12L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            MenuId = 12L,
                            RoleId = new Guid("b79f1af0-5a42-42ab-9b7f-9d3c8ae8f14e")
                        },
                        new
                        {
                            Id = 13L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            MenuId = 13L,
                            RoleId = new Guid("b79f1af0-5a42-42ab-9b7f-9d3c8ae8f14e")
                        },
                        new
                        {
                            Id = 14L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            MenuId = 14L,
                            RoleId = new Guid("b79f1af0-5a42-42ab-9b7f-9d3c8ae8f14e")
                        },
                        new
                        {
                            Id = 15L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            MenuId = 15L,
                            RoleId = new Guid("b79f1af0-5a42-42ab-9b7f-9d3c8ae8f14e")
                        },
                        new
                        {
                            Id = 16L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            MenuId = 16L,
                            RoleId = new Guid("b79f1af0-5a42-42ab-9b7f-9d3c8ae8f14e")
                        },
                        new
                        {
                            Id = 17L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            MenuId = 17L,
                            RoleId = new Guid("b79f1af0-5a42-42ab-9b7f-9d3c8ae8f14e")
                        },
                        new
                        {
                            Id = 18L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            MenuId = 18L,
                            RoleId = new Guid("b79f1af0-5a42-42ab-9b7f-9d3c8ae8f14e")
                        },
                        new
                        {
                            Id = 19L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            MenuId = 19L,
                            RoleId = new Guid("b79f1af0-5a42-42ab-9b7f-9d3c8ae8f14e")
                        },
                        new
                        {
                            Id = 20L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            MenuId = 20L,
                            RoleId = new Guid("b79f1af0-5a42-42ab-9b7f-9d3c8ae8f14e")
                        },
                        new
                        {
                            Id = 21L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            MenuId = 21L,
                            RoleId = new Guid("b79f1af0-5a42-42ab-9b7f-9d3c8ae8f14e")
                        },
                        new
                        {
                            Id = 22L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            MenuId = 22L,
                            RoleId = new Guid("b79f1af0-5a42-42ab-9b7f-9d3c8ae8f14e")
                        },
                        new
                        {
                            Id = 23L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            MenuId = 23L,
                            RoleId = new Guid("b79f1af0-5a42-42ab-9b7f-9d3c8ae8f14e")
                        },
                        new
                        {
                            Id = 24L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            MenuId = 24L,
                            RoleId = new Guid("b79f1af0-5a42-42ab-9b7f-9d3c8ae8f14e")
                        },
                        new
                        {
                            Id = 25L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            MenuId = 25L,
                            RoleId = new Guid("b79f1af0-5a42-42ab-9b7f-9d3c8ae8f14e")
                        },
                        new
                        {
                            Id = 26L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            MenuId = 26L,
                            RoleId = new Guid("b79f1af0-5a42-42ab-9b7f-9d3c8ae8f14e")
                        },
                        new
                        {
                            Id = 27L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            MenuId = 27L,
                            RoleId = new Guid("b79f1af0-5a42-42ab-9b7f-9d3c8ae8f14e")
                        },
                        new
                        {
                            Id = 28L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            MenuId = 28L,
                            RoleId = new Guid("b79f1af0-5a42-42ab-9b7f-9d3c8ae8f14e")
                        },
                        new
                        {
                            Id = 29L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            MenuId = 29L,
                            RoleId = new Guid("b79f1af0-5a42-42ab-9b7f-9d3c8ae8f14e")
                        },
                        new
                        {
                            Id = 30L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            MenuId = 30L,
                            RoleId = new Guid("b79f1af0-5a42-42ab-9b7f-9d3c8ae8f14e")
                        });
                });

            modelBuilder.Entity("ITX.Domain.Entities.Identity.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b79f1af0-5a42-42ab-9b7f-9d3c8ae8f14e"),
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("0d7c3138-41f3-4b8f-b49f-6d29ebee185c"),
                            Description = "Default role with all rights",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("112cad6b-69fc-4a39-8a0a-4a9993d51ae8"),
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("0d7c3138-41f3-4b8f-b49f-6d29ebee185c"),
                            Description = "Default role with tester rights",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Tester"
                        });
                });

            modelBuilder.Entity("ITX.Domain.Entities.Identity.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ClaimTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClaimTypeId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "Save",
                            ClaimTypeId = 1L,
                            ClaimValue = "True",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            RoleId = new Guid("b79f1af0-5a42-42ab-9b7f-9d3c8ae8f14e")
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "Edit",
                            ClaimTypeId = 2L,
                            ClaimValue = "True",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            RoleId = new Guid("b79f1af0-5a42-42ab-9b7f-9d3c8ae8f14e")
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "Delete",
                            ClaimTypeId = 3L,
                            ClaimValue = "True",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            RoleId = new Guid("b79f1af0-5a42-42ab-9b7f-9d3c8ae8f14e")
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "Add",
                            ClaimTypeId = 4L,
                            ClaimValue = "True",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            RoleId = new Guid("b79f1af0-5a42-42ab-9b7f-9d3c8ae8f14e")
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "Export",
                            ClaimTypeId = 5L,
                            ClaimValue = "True",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            RoleId = new Guid("b79f1af0-5a42-42ab-9b7f-9d3c8ae8f14e")
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "Import",
                            ClaimTypeId = 6L,
                            ClaimValue = "True",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            RoleId = new Guid("b79f1af0-5a42-42ab-9b7f-9d3c8ae8f14e")
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "Passive",
                            ClaimTypeId = 7L,
                            ClaimValue = "True",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            RoleId = new Guid("b79f1af0-5a42-42ab-9b7f-9d3c8ae8f14e")
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "Approve",
                            ClaimTypeId = 8L,
                            ClaimValue = "True",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            RoleId = new Guid("b79f1af0-5a42-42ab-9b7f-9d3c8ae8f14e")
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "View",
                            ClaimTypeId = 9L,
                            ClaimValue = "True",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            RoleId = new Guid("b79f1af0-5a42-42ab-9b7f-9d3c8ae8f14e")
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "Excel",
                            ClaimTypeId = 10L,
                            ClaimValue = "True",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            RoleId = new Guid("b79f1af0-5a42-42ab-9b7f-9d3c8ae8f14e")
                        },
                        new
                        {
                            Id = 11,
                            ClaimType = "Pdf",
                            ClaimTypeId = 11L,
                            ClaimValue = "True",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            RoleId = new Guid("b79f1af0-5a42-42ab-9b7f-9d3c8ae8f14e")
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "Switch",
                            ClaimTypeId = 12L,
                            ClaimValue = "True",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            RoleId = new Guid("b79f1af0-5a42-42ab-9b7f-9d3c8ae8f14e")
                        },
                        new
                        {
                            Id = 13,
                            ClaimType = "LoginAs",
                            ClaimTypeId = 13L,
                            ClaimValue = "True",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            RoleId = new Guid("b79f1af0-5a42-42ab-9b7f-9d3c8ae8f14e")
                        },
                        new
                        {
                            Id = 14,
                            ClaimType = "Active",
                            ClaimTypeId = 14L,
                            ClaimValue = "True",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            RoleId = new Guid("b79f1af0-5a42-42ab-9b7f-9d3c8ae8f14e")
                        });
                });

            modelBuilder.Entity("ITX.Domain.Entities.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CurrentRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Title")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime?>("TokenCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CurrentRoleId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0d7c3138-41f3-4b8f-b49f-6d29ebee185c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d7910375-73c4-4ba1-a627-d9d19e7bb029",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Email = "admin@itx.gov.tr",
                            EmailConfirmed = true,
                            IsActive = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            Name = "Admin",
                            PasswordHash = "AQAAAAIAAYagAAAAEOvb8RXazpGAhRivxV5w3iMYTqvAkqhTlGkZ3isVke/cOXX5ZPHEG1sXLo8wci1xWw==",
                            PhoneNumber = "905322223344",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            Surname = "Admin",
                            Title = "IT Admin",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("8b5a1bac-7ed9-4af3-a1bd-cc0b6039fba1"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5af96ed3-e47b-4461-bb8b-a7c947f17bd2",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("0d7c3138-41f3-4b8f-b49f-6d29ebee185c"),
                            Email = "testuser@test.com.tr",
                            EmailConfirmed = true,
                            IsActive = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            Name = "TestUser",
                            PasswordHash = "AQAAAAIAAYagAAAAEAiSRmBhhUg0Suv4Zl7tdckULxM7GVDOixXGvV8dE26ha/HKQxAe3PpNqgd0KQBJaQ==",
                            PhoneNumber = "5555555555",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            Surname = "TestUser",
                            Title = "Yazılım Geliştirici",
                            TwoFactorEnabled = false,
                            UserName = "testUser"
                        });
                });

            modelBuilder.Entity("ITX.Domain.Entities.Identity.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ClaimTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClaimTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "View",
                            ClaimTypeId = 9L,
                            ClaimValue = "Create User",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            UserId = new Guid("0d7c3138-41f3-4b8f-b49f-6d29ebee185c")
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "View",
                            ClaimTypeId = 9L,
                            ClaimValue = "Edit User",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            UserId = new Guid("8b5a1bac-7ed9-4af3-a1bd-cc0b6039fba1")
                        });
                });

            modelBuilder.Entity("ITX.Domain.Entities.Identity.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("0d7c3138-41f3-4b8f-b49f-6d29ebee185c"),
                            RoleId = new Guid("b79f1af0-5a42-42ab-9b7f-9d3c8ae8f14e"),
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            UserId = new Guid("8b5a1bac-7ed9-4af3-a1bd-cc0b6039fba1"),
                            RoleId = new Guid("112cad6b-69fc-4a39-8a0a-4a9993d51ae8"),
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("ITX.Domain.Entities.LogManagement.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryKey")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TableName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AuditLog", (string)null);
                });

            modelBuilder.Entity("ITX.Domain.Entities.LogManagement.RequestLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("FieldId")
                        .HasColumnType("bigint");

                    b.Property<string>("FieldName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fonksiyon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HataKod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit");

                    b.Property<string>("Islem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RemoteIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestLogTypeCodeId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("RequestLogs");
                });

            modelBuilder.Entity("ITX.Domain.Entities.Predefined.Announce", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(94);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(95);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(98);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnOrder(99);

                    b.Property<bool>("IsPublish")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(96);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(97);

                    b.HasKey("Id");

                    b.ToTable("Announce", (string)null);
                });

            modelBuilder.Entity("ITX.Domain.Entities.Predefined.AppSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Aciklama")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ad")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(94);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(95);

                    b.Property<string>("Deger")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EnmVeriTipId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(98);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnOrder(99);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(96);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(97);

                    b.HasKey("Id");

                    b.HasIndex("Ad");

                    b.ToTable("AppSetting", (string)null);
                });

            modelBuilder.Entity("ITX.Domain.Entities.Predefined.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0)
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'85', '1', '', '', 'False', '1'");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(94);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(95);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(98);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnOrder(99);

                    b.Property<double?>("Lat")
                        .HasColumnType("float");

                    b.Property<double?>("Lng")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(96);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(97);

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("ZoneId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("Name");

                    b.HasIndex("UserId");

                    b.ToTable("City", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Code = "34",
                            CountryId = 1L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "İstanbul",
                            PhoneCode = "216"
                        },
                        new
                        {
                            Id = 2L,
                            Code = "06",
                            CountryId = 1L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Ankara",
                            PhoneCode = "312"
                        },
                        new
                        {
                            Id = 3L,
                            Code = "",
                            CountryId = 2L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Saksonya",
                            PhoneCode = ""
                        },
                        new
                        {
                            Id = 4L,
                            Code = "",
                            CountryId = 2L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Bremen",
                            PhoneCode = ""
                        });
                });

            modelBuilder.Entity("ITX.Domain.Entities.Predefined.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0)
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'250', '1', '', '', 'False', '1'");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("0");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(94);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(95);

                    b.Property<long?>("CurrencyDefinitionId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(98);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnOrder(99);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneCode")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(96);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(97);

                    b.HasKey("Id");

                    b.HasIndex("CurrencyDefinitionId");

                    b.ToTable("Country", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Code = "TR",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CurrencyDefinitionId = 1L,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Türkiye",
                            PhoneCode = 90
                        },
                        new
                        {
                            Id = 2L,
                            Code = "DE",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CurrencyDefinitionId = 1L,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Almanya",
                            PhoneCode = 49
                        });
                });

            modelBuilder.Entity("ITX.Domain.Entities.Predefined.CurrencyDefinition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0)
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'250', '1', '', '', 'False', '1'");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(94);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(95);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(98);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnOrder(99);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(96);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(97);

                    b.HasKey("Id");

                    b.ToTable("CurrencyDefinition", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Türk Lirası",
                            ShortName = "TL",
                            Symbol = "₺"
                        });
                });

            modelBuilder.Entity("ITX.Domain.Entities.Predefined.District", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("0");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(94);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(95);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(98);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnOrder(99);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(96);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(97);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("District", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CityId = 1L,
                            Code = "34660",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Üsküdar"
                        });
                });

            modelBuilder.Entity("ITX.Domain.Entities.Test.Lesson", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(94);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(95);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(98);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnOrder(99);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(96);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(97);

                    b.HasKey("Id");

                    b.ToTable("Lesson", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Ýngilizce"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Matematik"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Dil ve Anlatým"
                        });
                });

            modelBuilder.Entity("ITX.Domain.Entities.Test.Scenario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(94);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(95);

                    b.Property<long>("CurrencyDefinitionId")
                        .HasColumnType("bigint");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(98);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnOrder(99);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequestLogTypeCodeId")
                        .HasColumnType("int");

                    b.Property<string>("TestBaslik")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TestDeger")
                        .HasColumnType("int");

                    b.Property<string>("TestDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TestTarih")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UlasimAracId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(96);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(97);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CurrencyDefinitionId");

                    b.ToTable("Scenario", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CityId = 1L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CurrencyDefinitionId = 1L,
                            GenderId = 10,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Scenario Test 1",
                            RequestLogTypeCodeId = 10,
                            TestBaslik = "Test Baþlýk",
                            TestDeger = 999,
                            TestDescription = "Test Description",
                            TestTarih = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UlasimAracId = 3L
                        },
                        new
                        {
                            Id = 2L,
                            CityId = 2L,
                            CountryId = 1L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CurrencyDefinitionId = 1L,
                            GenderId = 20,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Scenario Test 2",
                            RequestLogTypeCodeId = 30,
                            TestBaslik = "Test Baþlýk",
                            TestDeger = 111,
                            TestDescription = "Test Description",
                            TestTarih = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UlasimAracId = 3L
                        });
                });

            modelBuilder.Entity("ITX.Domain.Entities.Test.Student", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(94);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(95);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(98);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnOrder(99);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ScenarioId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(96);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(97);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ScenarioId");

                    b.ToTable("Student", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CityId = 1L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Veli",
                            ScenarioId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CityId = 2L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Ahmet",
                            ScenarioId = 2L
                        });
                });

            modelBuilder.Entity("ITX.Domain.Entities.Test.StudentLesson", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(94);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(95);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(98);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnOrder(99);

                    b.Property<long>("LessonId")
                        .HasColumnType("bigint");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(96);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(97);

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentLesson", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ITX.Domain.Entities.FormManagement.DegerTarih", b =>
                {
                    b.HasOne("ITX.Domain.Entities.FormManagement.FormAlan", "FormAlan")
                        .WithMany()
                        .HasForeignKey("FormAlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ITX.Domain.Entities.FormManagement.FormDeger", "FormDeger")
                        .WithMany()
                        .HasForeignKey("FormDegerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ITX.Domain.Entities.FormManagement.FormTanim", "FormTanim")
                        .WithMany()
                        .HasForeignKey("FormTanimId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FormAlan");

                    b.Navigation("FormDeger");

                    b.Navigation("FormTanim");
                });

            modelBuilder.Entity("ITX.Domain.Entities.FormManagement.FormAlan", b =>
                {
                    b.HasOne("ITX.Domain.Entities.FormManagement.FormTanim", "FormTanim")
                        .WithMany()
                        .HasForeignKey("FormTanimId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FormTanim");
                });

            modelBuilder.Entity("ITX.Domain.Entities.FormManagement.FormDeger", b =>
                {
                    b.HasOne("ITX.Domain.Entities.FormManagement.FormTanim", "FormTanim")
                        .WithMany()
                        .HasForeignKey("FormTanimId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FormTanim");
                });

            modelBuilder.Entity("ITX.Domain.Entities.FormManagement.FormTanim", b =>
                {
                    b.HasOne("ITX.Domain.Entities.FormManagement.FormTanim", "UstNesne")
                        .WithMany("AltNesneler")
                        .HasForeignKey("UstId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("UstNesne");
                });

            modelBuilder.Entity("ITX.Domain.Entities.FormManagement.FormTarihce", b =>
                {
                    b.HasOne("ITX.Domain.Entities.FormManagement.FormDeger", "FormDeger")
                        .WithMany()
                        .HasForeignKey("FormDegerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ITX.Domain.Entities.FormManagement.FormTanim", "FormTanim")
                        .WithMany()
                        .HasForeignKey("FormTanimId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FormDeger");

                    b.Navigation("FormTanim");
                });

            modelBuilder.Entity("ITX.Domain.Entities.FormManagement.ValueNumber", b =>
                {
                    b.HasOne("ITX.Domain.Entities.FormManagement.FormAlan", "FormAlan")
                        .WithMany()
                        .HasForeignKey("FormAlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ITX.Domain.Entities.FormManagement.FormDeger", "FormDeger")
                        .WithMany()
                        .HasForeignKey("FormDegerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ITX.Domain.Entities.FormManagement.FormTanim", "FormTanim")
                        .WithMany()
                        .HasForeignKey("FormTanimId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FormAlan");

                    b.Navigation("FormDeger");

                    b.Navigation("FormTanim");
                });

            modelBuilder.Entity("ITX.Domain.Entities.FormManagement.ValueText", b =>
                {
                    b.HasOne("ITX.Domain.Entities.FormManagement.FormAlan", "FormAlan")
                        .WithMany()
                        .HasForeignKey("FormAlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ITX.Domain.Entities.FormManagement.FormDeger", "FormDeger")
                        .WithMany()
                        .HasForeignKey("FormDegerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ITX.Domain.Entities.FormManagement.FormTanim", "FormTanim")
                        .WithMany()
                        .HasForeignKey("FormTanimId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FormAlan");

                    b.Navigation("FormDeger");

                    b.Navigation("FormTanim");
                });

            modelBuilder.Entity("ITX.Domain.Entities.Identity.Menu", b =>
                {
                    b.HasOne("ITX.Domain.Entities.Identity.Menu", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ITX.Domain.Entities.Identity.MenuRole", b =>
                {
                    b.HasOne("ITX.Domain.Entities.Identity.Menu", "Menu")
                        .WithMany("MenuRoles")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITX.Domain.Entities.Identity.Role", "Role")
                        .WithMany("MenuRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ITX.Domain.Entities.Identity.RoleClaim", b =>
                {
                    b.HasOne("ITX.Domain.Entities.Identity.ClaimType", "ClaimTypeModel")
                        .WithMany()
                        .HasForeignKey("ClaimTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ITX.Domain.Entities.Identity.Role", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClaimTypeModel");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ITX.Domain.Entities.Identity.User", b =>
                {
                    b.HasOne("ITX.Domain.Entities.Identity.Role", "CurrentRole")
                        .WithMany()
                        .HasForeignKey("CurrentRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CurrentRole");
                });

            modelBuilder.Entity("ITX.Domain.Entities.Identity.UserClaim", b =>
                {
                    b.HasOne("ITX.Domain.Entities.Identity.ClaimType", "ClaimTypeModel")
                        .WithMany()
                        .HasForeignKey("ClaimTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ITX.Domain.Entities.Identity.User", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClaimTypeModel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ITX.Domain.Entities.Identity.UserRole", b =>
                {
                    b.HasOne("ITX.Domain.Entities.Identity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITX.Domain.Entities.Identity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ITX.Domain.Entities.LogManagement.AuditLog", b =>
                {
                    b.HasOne("ITX.Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ITX.Domain.Entities.Predefined.City", b =>
                {
                    b.HasOne("ITX.Domain.Entities.Predefined.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ITX.Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Country");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ITX.Domain.Entities.Predefined.Country", b =>
                {
                    b.HasOne("ITX.Domain.Entities.Predefined.CurrencyDefinition", "CurrencyDefinition")
                        .WithMany()
                        .HasForeignKey("CurrencyDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CurrencyDefinition");
                });

            modelBuilder.Entity("ITX.Domain.Entities.Predefined.District", b =>
                {
                    b.HasOne("ITX.Domain.Entities.Predefined.City", "City")
                        .WithMany("Districts")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("ITX.Domain.Entities.Test.Scenario", b =>
                {
                    b.HasOne("ITX.Domain.Entities.Predefined.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ITX.Domain.Entities.Predefined.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ITX.Domain.Entities.Predefined.CurrencyDefinition", "CurrencyDefinition")
                        .WithMany()
                        .HasForeignKey("CurrencyDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("CurrencyDefinition");
                });

            modelBuilder.Entity("ITX.Domain.Entities.Test.Student", b =>
                {
                    b.HasOne("ITX.Domain.Entities.Predefined.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ITX.Domain.Entities.Test.Scenario", "Scenario")
                        .WithMany("Students")
                        .HasForeignKey("ScenarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Scenario");
                });

            modelBuilder.Entity("ITX.Domain.Entities.Test.StudentLesson", b =>
                {
                    b.HasOne("ITX.Domain.Entities.Test.Lesson", "Lesson")
                        .WithMany("StudentLessons")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ITX.Domain.Entities.Test.Student", "Student")
                        .WithMany("StudentLessons")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ITX.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ITX.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ITX.Domain.Entities.FormManagement.FormTanim", b =>
                {
                    b.Navigation("AltNesneler");
                });

            modelBuilder.Entity("ITX.Domain.Entities.Identity.Menu", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("MenuRoles");
                });

            modelBuilder.Entity("ITX.Domain.Entities.Identity.Role", b =>
                {
                    b.Navigation("MenuRoles");

                    b.Navigation("RoleClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ITX.Domain.Entities.Identity.User", b =>
                {
                    b.Navigation("UserClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ITX.Domain.Entities.Predefined.City", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("ITX.Domain.Entities.Predefined.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("ITX.Domain.Entities.Test.Lesson", b =>
                {
                    b.Navigation("StudentLessons");
                });

            modelBuilder.Entity("ITX.Domain.Entities.Test.Scenario", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("ITX.Domain.Entities.Test.Student", b =>
                {
                    b.Navigation("StudentLessons");
                });
#pragma warning restore 612, 618
        }
    }
}
