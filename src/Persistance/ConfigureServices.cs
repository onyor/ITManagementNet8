using FluentValidation;
//using ITX.Application
using ITX.Application.Constants;
using ITX.Application.Interfaces.Identity;
using ITX.Application.Interfaces.Test;
using ITX.Application.Repositories.FormManagement;
using ITX.Application.Repositories.IBase;
using ITX.Application.Repositories.LogManagement;
using ITX.Application.Repositories.Predefined;
using ITX.Application.Specifications;
using ITX.Infrastructure.Data.Repositories.Identity;
using ITX.Infrastructure.Data.Repositories.Test;

//using ITX.Persistance
using ITX.Persistance.Cache;
using ITX.Persistance.Database;
using ITX.Persistance.Database.Base;
using ITX.Persistance.Database.Context;
using ITX.Persistance.Database.Repositories.FormManagement;
using ITX.Persistance.Database.Repositories.Identity;
using ITX.Persistance.Database.Repositories.Predefined;
using ITX.Persistance.Repositories.FormManagement;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System.Reflection;

namespace ITX.Persistance;

public static class ConfigureServices
{
    public static IServiceCollection AddPersistanceServices(this IServiceCollection services, IConfiguration configuration)
    {
        services.AddSingleton<ICache, MemoryCache>();

        services.AddTransient<IUnitOfWork, UnitOfWork>();

        services.AddTransient<ICityRepository, CityRepository>();
        services.AddTransient<IAnnounceRepository, AnnounceRepository>();
        services.AddTransient<IAppSettingRepository, AppSettingRepository>();
        services.AddTransient<ICountryRepository, CountryRepository>();
        services.AddTransient<ICurrencyDefinitionRepository, CurrencyDefinitionRepository>();
        services.AddTransient<IDistrictRepository, DistrictRepository>();
        services.AddTransient<IEnumVeriRepository, EnumVeriRepository>();
        services.AddTransient<IMenuRepository, MenuRepository>();
        services.AddTransient<IMenuRoleRepository, MenuRoleRepository>();
        services.AddTransient<IAuditLogRepository, AuditLogRepository>();
        services.AddTransient<IRequestLogRepository, RequestLogRepository>();
        services.AddTransient<IDegerTarihRepository, DegerTarihRepository>();
        services.AddTransient<IFormAlanRepository, FormAlanRepository>();
        services.AddTransient<IFormDegerRepository, FormDegerRepository>();
        services.AddTransient<IFormTanimRepository, FormTanimRepository>();
        services.AddTransient<IFormTarihceRepository, FormTarihceRepository>();
        services.AddTransient<IValueNumberRepository, ValueNumberRepository>();
        services.AddTransient<IValueTextRepository, ValueTextRepository>();
        services.AddTransient<IClaimTypeRepository, ClaimTypeRepository>();

        /* <auto-generated (for-script)/> */  //Bu satir onemlidir script icin lazim VERY IMPORTANT !! !!
		services.AddTransient<ILessonRepository, LessonRepository>();

		services.AddTransient<IStudentLessonRepository, StudentLessonRepository>();

		services.AddTransient<IStudentRepository, StudentRepository>();

		services.AddTransient<IScenarioRepository, ScenarioRepository>();

        services.AddValidatorsFromAssembly(Assembly.GetExecutingAssembly());

        services.AddScoped(typeof(IAsyncRepository<>), typeof(EfRepositoryBase<>));

        // ITManagementDbContext i�in DbContextFactory yap�land�rmas�
        services.AddDbContextFactory<ITManagementDbContext>(builder =>
        {
            builder.UseSqlServer(configuration.GetConnectionString("DefaultConnection"));
        });

        services.AddDbContext<ITManagementLogContext>(options =>
            options.UseSqlServer(configuration.GetConnectionString("LogConnection"))
        );

        services.AddSingleton(configuration.GetSection("EmailConfiguration").Get<MailSettings>()
                                   ?? new MailSettings());

        return services;
    }
}
